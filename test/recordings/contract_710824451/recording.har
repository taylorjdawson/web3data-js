{
  "log": {
    "_recordingName": "contract",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "2.6.0"
    },
    "entries": [
      {
        "_id": "28728bb7bef22c76609ab04f3f583ea7",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "x-api-key",
              "value": "API_KEY"
            },
            {
              "name": "user-agent",
              "value": "axios/0.19.0"
            },
            {
              "name": "host",
              "value": "web3api.io"
            }
          ],
          "headersSize": 236,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [],
          "url": "https://web3api.io/api/v1/contracts/0x06012c8cf97bead5deae237070f9587f8e7a266d/audit"
        },
        "response": {
          "bodySize": 3000,
          "content": {
            "mimeType": "application/json; charset=utf-8",
            "size": 3000,
            "text": "{\"status\":200,\"title\":\"OK\",\"description\":\"Successful request\",\"payload\":{\"error\":null,\"issues\":[{\"address\":391,\"code\":\"candidateContract.supportsInterface(InterfaceSignature_ERC721)\",\"contract\":\"ClockAuction\",\"debug\":\"\",\"description\":\"This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.\",\"filename\":\"/tmp/0x06012c8cf97bead5deae237070f9587f8e7a266dB07Fju/0x06012c8cf97bead5deae237070f9587f8e7a266d\",\"function\":\"constructor\",\"lineno\":1388,\"title\":\"Message call to external contract\",\"type\":\"Informational\"},{\"address\":420,\"code\":\"candidateContract.supportsInterface(InterfaceSignature_ERC721)\",\"contract\":\"SaleClockAuction\",\"debug\":\"\",\"description\":\"This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.\",\"filename\":\"/tmp/0x06012c8cf97bead5deae237070f9587f8e7a266dB07Fju/0x06012c8cf97bead5deae237070f9587f8e7a266d\",\"function\":\"constructor\",\"lineno\":1388,\"title\":\"Message call to external contract\",\"type\":\"Informational\"},{\"address\":420,\"code\":\"candidateContract.supportsInterface(InterfaceSignature_ERC721)\",\"contract\":\"SiringClockAuction\",\"debug\":\"\",\"description\":\"This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.\",\"filename\":\"/tmp/0x06012c8cf97bead5deae237070f9587f8e7a266dB07Fju/0x06012c8cf97bead5deae237070f9587f8e7a266d\",\"function\":\"constructor\",\"lineno\":1388,\"title\":\"Message call to external contract\",\"type\":\"Informational\"},{\"address\":2107,\"code\":\"uint256[5] public lastGen0SalePrices\",\"contract\":\"SaleClockAuction\",\"debug\":\"The exception is triggered under the following conditions:\\n\\n29_code(SaleClockAuction): 0x0\\n30_calldata_SaleClockAuction[4]: 0x5\\n30_calldata_SaleClockAuction[0]: 0x484eccb400000000000000000000000000000000000000000000000000000000\\n30_calldatasize_SaleClockAuction: 0x4\\n29_returndatasize: 0x20\\n29_retval_420: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n29_extcodesize_1461501637330902918203684832716283019655932542975 &\\n29_code(SaleClockAuction): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\ncall_value30: 0x0\\ncall_value29: 0x0\\n\",\"description\":\"A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. \",\"filename\":\"/tmp/0x06012c8cf97bead5deae237070f9587f8e7a266dB07Fju/0x06012c8cf97bead5deae237070f9587f8e7a266d\",\"function\":\"lastGen0SalePrices(uint256)\",\"lineno\":1602,\"title\":\"Exception state\",\"type\":\"Informational\"}],\"success\":true,\"score\":{\"name\":\"C\",\"total\":4,\"errors\":0,\"information\":4,\"warnings\":0},\"target\":\"sourcecode\",\"timestamp\":\"2018-10-11T09:19:30.263Z\"}}"
          },
          "cookies": [
            {
              "expires": "2019-07-26T20:28:53.000Z",
              "name": "AWSALB",
              "path": "/",
              "value": "B9Tst+CM6IPJeWoedymcayA1wpIOJpU13yJEYxPmfI4AsKt30OmW5aFruiv6ESZajZhvzideHSt0Kly5PbEFYA3vFpcN/jJ2gkLNdAxofX6oC7eJDf9Fi60DnHOi"
            }
          ],
          "headers": [
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "3000"
            },
            {
              "name": "connection",
              "value": "close"
            },
            {
              "name": "date",
              "value": "Fri, 19 Jul 2019 20:28:53 GMT"
            },
            {
              "name": "x-amzn-requestid",
              "value": "d30e3a75-aa63-11e9-aa5a-23c67917beda"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "x-response-time",
              "value": "156.222ms"
            },
            {
              "name": "x-amzn-remapped-content-length",
              "value": "3000"
            },
            {
              "name": "x-amzn-remapped-connection",
              "value": "keep-alive"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "AWSALB=B9Tst+CM6IPJeWoedymcayA1wpIOJpU13yJEYxPmfI4AsKt30OmW5aFruiv6ESZajZhvzideHSt0Kly5PbEFYA3vFpcN/jJ2gkLNdAxofX6oC7eJDf9Fi60DnHOi; Expires=Fri, 26 Jul 2019 20:28:53 GMT; Path=/"
            },
            {
              "name": "x-amz-apigw-id",
              "value": "dFswyEOJIAMFXEw="
            },
            {
              "name": "etag",
              "value": "W/\"bb8-y7/gjlh3oFSMuBoOPPw6sTKAVdg\""
            },
            {
              "name": "x-amzn-remapped-date",
              "value": "Fri, 19 Jul 2019 20:28:53 GMT"
            },
            {
              "name": "x-cache",
              "value": "Miss from cloudfront"
            },
            {
              "name": "via",
              "value": "1.1 4c4ed81695980f3c6829b9fd229bd0f8.cloudfront.net (CloudFront)"
            },
            {
              "name": "x-amz-cf-pop",
              "value": "SEA19"
            },
            {
              "name": "x-amz-cf-id",
              "value": "Prtz3zv9yoiFfhw2AabfgdIWQPqz35gI2GlDlz-vG_8p-jsHe7OkTQ=="
            }
          ],
          "headersSize": 837,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2019-07-19T20:28:52.800Z",
        "time": 519,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 519
        }
      },
      {
        "_id": "6f92f3a630eb101a554295b99bbe8ad7",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "x-api-key",
              "value": "API_KEY"
            },
            {
              "name": "user-agent",
              "value": "axios/0.19.0"
            },
            {
              "name": "host",
              "value": "web3api.io"
            }
          ],
          "headersSize": 230,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [],
          "url": "https://web3api.io/api/v1/contracts/0x06012c8cf97bead5deae237070f9587f8e7a266d"
        },
        "response": {
          "bodySize": 122309,
          "content": {
            "mimeType": "application/json; charset=utf-8",
            "size": 122309,
            "text": "{\"status\":200,\"title\":\"OK\",\"description\":\"Successful request\",\"payload\":{\"bytecode\":\"0x606060409081526002805460a060020a60ff02191690556101c090519081016040908152603c82526078602083015261012c9082015261025860608201526107086080820152610e1060a0820152611c2060c082015261384060e082015261708061010082015261e100610120820152620151806101408201526202a3006101608201526205460061018082015262093a806101a0820152620000a790600390600e620004e4565b50600f60055566071afd498d0000600e553415620000c457600080fd5b6002805460008054600160a060020a033316600160a060020a03199182168117835560a060020a60ff02199093167401000000000000000000000000000000000000000017169091179091556200012f90808060001981640100000000620028f06200013682021704565b5062000649565b6000806200014362000587565b600063ffffffff891689146200015857600080fd5b63ffffffff881688146200016b57600080fd5b61ffff871687146200017c57600080fd5b600287049250600d8361ffff1611156200019557600d92505b61010060405190810160409081528782526001604060020a0342166020830152600090820181905263ffffffff808c1660608401528a16608083015260a082015261ffff80851660c0830152881660e082015260068054919350600191808301620002018382620005cb565b6000928352602090922085916002020181518155602082015160018201805467ffffffffffffffff19166001604060020a039290921691909117905560408201518160010160086101000a8154816001604060020a0302191690836001604060020a0316021790555060608201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060c082015181600101601c6101000a81548161ffff021916908361ffff16021790555060e08201516001909101805461ffff929092167e0100000000000000000000000000000000000000000000000000000000000002600160f060020a039092169190911790555003905063ffffffff811681146200035e57600080fd5b7f0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad58582846060015163ffffffff16856080015163ffffffff168651604051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a1620003ef60008683640100000000620025e0620003fb82021704565b98975050505050505050565b600160a060020a03808316600081815260086020908152604080832080546001019055858352600790915290208054600160a060020a03191690911790558316156200048f57600160a060020a03831660009081526008602090815260408083208054600019019055838352600a82528083208054600160a060020a03199081169091556009909252909120805490911690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b600283019183908215620005755791602002820160005b838211156200054157835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620004fb565b8015620005735782816101000a81549063ffffffff021916905560040160208160030104928301926001030262000541565b505b5062000583929150620005ff565b5090565b6101006040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082015290565b815481835581811511620005fa57600202816002028360005260206000209182019101620005fa919062000626565b505050565b6200062391905b808211156200058357805463ffffffff1916815560010162000606565b90565b6200062391905b808211156200058357600080825560018201556002016200062d565b61309380620006596000396000f3006060604052600436106102a55763ffffffff60e060020a60003504166301ffc9a781146102dd5780630519ce79146103295780630560ff441461035857806305e45546146103f157806306fdde0314610416578063095ea7b3146104295780630a0f81681461044b5780630e583df01461045e57806314001f4c1461047157806318160ddd14610490578063183a7947146104a35780631940a936146104b657806319c2f201146104cc57806321717ebf146104df57806323b872dd146104f257806324e7a38a1461051a57806327d7874c146105395780632ba73c15146105585780633d7d3f5a146105775780633f4ba83a1461059657806346116e6f146105a957806346d22c70146105bf578063481af3d3146105d85780634ad8c938146105ee5780634b85fd551461060d5780634dfff04f146106235780634e0a33791461064557806356129134146106645780635663896e146106865780635c975abb1461069c5780635fd8c710146106af5780636352211e146106c2578063680eba27146106d85780636af04a57146106eb5780636fbde40d146106fe57806370a082311461071d578063715879881461073c5780637a7d49371461075b5780638456cb591461076e5780638462151c1461078157806388c2a0bf146107f357806391876e571461080957806395d89b411461081c5780639d6fac6f1461082f578063a45f4bfc1461085e578063a9059cbb14610874578063b047fb5014610896578063b0c35c05146108a9578063bc4006f5146108bc578063c3bea9af146108cf578063d3e6f49f146108e5578063defb9584146108fb578063e17b25af1461090e578063e6cbe3511461092d578063e98b7f4d14610940578063ed60ade6146109ae578063f1ca9410146109bc578063f2b47d52146109cf578063f7d8c883146109e2575b600b5433600160a060020a03908116911614806102d05750600c5433600160a060020a039081169116145b15156102db57600080fd5b005b34156102e857600080fd5b6103157fffffffff00000000000000000000000000000000000000000000000000000000600435166109f0565b604051901515815260200160405180910390f35b341561033457600080fd5b61033c610c77565b604051600160a060020a03909116815260200160405180910390f35b341561036357600080fd5b61037a600480359060248035908101910135610c86565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103b657808201518382015260200161039e565b50505050905090810190601f1680156103e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103fc57600080fd5b610404610d63565b60405190815260200160405180910390f35b341561042157600080fd5b61037a610d69565b341561043457600080fd5b6102db600160a060020a0360043516602435610da0565b341561045657600080fd5b61033c610e2a565b341561046957600080fd5b610404610e39565b341561047c57600080fd5b6102db600160a060020a0360043516610e44565b341561049b57600080fd5b610404610ef1565b34156104ae57600080fd5b610404610efc565b34156104c157600080fd5b610315600435610f02565b34156104d757600080fd5b610404610f47565b34156104ea57600080fd5b61033c610f4e565b34156104fd57600080fd5b6102db600160a060020a0360043581169060243516604435610f5d565b341561052557600080fd5b6102db600160a060020a0360043516610fe4565b341561054457600080fd5b6102db600160a060020a0360043516611091565b341561056357600080fd5b6102db600160a060020a03600435166110e3565b341561058257600080fd5b6102db600435602435604435606435611135565b34156105a157600080fd5b6102db611214565b34156105b457600080fd5b61033c6004356112ac565b34156105ca57600080fd5b6103156004356024356112c7565b34156105e357600080fd5b61033c600435611347565b34156105f957600080fd5b6102db600435602435604435606435611362565b341561061857600080fd5b6102db600435611428565b341561062e57600080fd5b6102db600160a060020a0360043516602435611448565b341561065057600080fd5b6102db600160a060020a03600435166114a2565b341561066f57600080fd5b6102db600435600160a060020a03602435166114f4565b341561069157600080fd5b6102db600435611560565b34156106a757600080fd5b6103156115c8565b34156106ba57600080fd5b6102db6115d8565b34156106cd57600080fd5b61033c600435611649565b34156106e357600080fd5b61040461166d565b34156106f657600080fd5b61033c611673565b341561070957600080fd5b6102db600160a060020a0360043516611682565b341561072857600080fd5b610404600160a060020a036004351661172f565b341561074757600080fd5b6102db600160a060020a036004351661174a565b341561076657600080fd5b6104046117d8565b341561077957600080fd5b6102db6117de565b341561078c57600080fd5b6107a0600160a060020a036004351661186a565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156107df5780820151838201526020016107c7565b505050509050019250505060405180910390f35b34156107fe57600080fd5b61040460043561194b565b341561081457600080fd5b6102db611c1b565b341561082757600080fd5b61037a611d0e565b341561083a57600080fd5b610845600435611d45565b60405163ffffffff909116815260200160405180910390f35b341561086957600080fd5b61033c600435611d72565b341561087f57600080fd5b6102db600160a060020a0360043516602435611d8d565b34156108a157600080fd5b61033c611e30565b34156108b457600080fd5b610404611e3f565b34156108c757600080fd5b61033c611e45565b34156108da57600080fd5b6102db600435611e54565b34156108f057600080fd5b610315600435611f47565b341561090657600080fd5b610404612010565b341561091957600080fd5b6102db600160a060020a0360043516612016565b341561093857600080fd5b61033c612053565b341561094b57600080fd5b610956600435612062565b6040519915158a5297151560208a01526040808a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152610120830191909152610140909101905180910390f35b6102db6004356024356121c3565b34156109c757600080fd5b610404612316565b34156109da57600080fd5b61033c61231c565b6102db60043560243561232b565b60006040517f737570706f727473496e7465726661636528627974657334290000000000000081526019016040518091039020600160e060020a03191682600160e060020a0319161480610c6f57506040517f746f6b656e4d657461646174612875696e743235362c737472696e67290000008152601d0160405180910390206040517f746f6b656e734f664f776e657228616464726573732900000000000000000000815260160160405180910390206040517f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81527f7432353629000000000000000000000000000000000000000000000000000000602082015260250160405180910390206040517f7472616e7366657228616464726573732c75696e743235362900000000000000815260190160405180910390206040517f617070726f766528616464726573732c75696e74323536290000000000000000815260180160405180910390206040517f6f776e65724f662875696e743235362900000000000000000000000000000000815260100160405180910390206040517f62616c616e63654f662861646472657373290000000000000000000000000000815260120160405180910390206040517f746f74616c537570706c792829000000000000000000000000000000000000008152600d0160405180910390206040517f73796d626f6c2829000000000000000000000000000000000000000000000000815260080160405180910390206040517f6e616d652829000000000000000000000000000000000000000000000000000081526006016040518091039020181818181818181818600160e060020a03191682600160e060020a031916145b90505b919050565b600154600160a060020a031681565b610c8e612fa0565b610c96612fb2565b600d54600090600160a060020a03161515610cb057600080fd5b600d54600160a060020a031663cb4799f2878787600060405160a0015260405160e060020a63ffffffff861602815260048101848152604060248301908152604483018490529091606401848480828437820191505094505050505060a060405180830381600087803b1515610d2557600080fd5b6102c65a03f11515610d3657600080fd5b50505060405180608001805160209091016040529092509050610d59828261251d565b9695505050505050565b60115481565b60408051908101604052600d81527f43727970746f4b69747469657300000000000000000000000000000000000000602082015281565b60025460a060020a900460ff1615610db757600080fd5b610dc13382612572565b1515610dcc57600080fd5b610dd68183612592565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15050565b600054600160a060020a031681565b662386f26fc1000081565b6000805433600160a060020a03908116911614610e6057600080fd5b5080600160a060020a0381166376190f8f6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ea857600080fd5b6102c65a03f11515610eb957600080fd5b505050604051805190501515610ece57600080fd5b600c8054600160a060020a031916600160a060020a039290921691909117905550565b600654600019015b90565b600f5481565b6000808211610f1057600080fd5b6006805483908110610f1e57fe5b600091825260209091206002909102016001015460c060020a900463ffffffff16151592915050565b6201518081565b600c54600160a060020a031681565b60025460a060020a900460ff1615610f7457600080fd5b600160a060020a0382161515610f8957600080fd5b30600160a060020a031682600160a060020a031614151515610faa57600080fd5b610fb433826125c0565b1515610fbf57600080fd5b610fc98382612572565b1515610fd457600080fd5b610fdf8383836125e0565b505050565b6000805433600160a060020a0390811691161461100057600080fd5b5080600160a060020a0381166354c15b826000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561104857600080fd5b6102c65a03f1151561105957600080fd5b50505060405180519050151561106e57600080fd5b60108054600160a060020a031916600160a060020a039290921691909117905550565b60005433600160a060020a039081169116146110ac57600080fd5b600160a060020a03811615156110c157600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146110fe57600080fd5b600160a060020a038116151561111357600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60025460a060020a900460ff161561114c57600080fd5b6111563385612572565b151561116157600080fd5b61116a84610f02565b1561117457600080fd5b600b5461118b908590600160a060020a0316612592565b600b54600160a060020a03166327ebe40a858585853360405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b15156111fa57600080fd5b6102c65a03f1151561120b57600080fd5b50505050505050565b60005433600160a060020a0390811691161461122f57600080fd5b60025460a060020a900460ff16151561124757600080fd5b600b54600160a060020a0316151561125e57600080fd5b600c54600160a060020a0316151561127557600080fd5b601054600160a060020a0316151561128c57600080fd5b601354600160a060020a0316156112a257600080fd5b6112aa6126c8565b565b600a60205260009081526040902054600160a060020a031681565b600080808085116112d757600080fd5b600084116112e457600080fd5b60068054869081106112f257fe5b9060005260206000209060020201915060068481548110151561131157fe5b9060005260206000209060020201905061132d8286838761271b565b801561133e575061133e848661289b565b95945050505050565b600960205260009081526040902054600160a060020a031681565b60025460a060020a900460ff161561137957600080fd5b6113833385612572565b151561138e57600080fd5b61139784611f47565b15156113a257600080fd5b600c546113b9908590600160a060020a0316612592565b600c54600160a060020a03166327ebe40a858585853360405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b15156111fa57600080fd5b60025433600160a060020a0390811691161461144357600080fd5b600e55565b60025460a060020a900460ff161561145f57600080fd5b6114693382612572565b151561147457600080fd5b6000908152600a602052604090208054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146114bd57600080fd5b600160a060020a03811615156114d257600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60025460009033600160a060020a0390811691161461151257600080fd5b5080600160a060020a03811615156115325750600254600160a060020a03165b601154611388901061154357600080fd5b60118054600101905561155a6000808086856128f0565b50505050565b60025433600160a060020a039081169116148061158b575060005433600160a060020a039081169116145b806115a4575060015433600160a060020a039081169116145b15156115af57600080fd5b60035463ffffffff1681106115c357600080fd5b600555565b60025460a060020a900460ff1681565b600154600090819033600160a060020a039081169116146115f857600080fd5b30600160a060020a0316319150600e54600f546001010290508082111561164557600154600160a060020a031681830380156108fc0290604051600060405180830381858888f150505050505b5050565b600081815260076020526040902054600160a060020a0316801515610c7257600080fd5b61afc881565b601354600160a060020a031681565b6000805433600160a060020a0390811691161461169e57600080fd5b5080600160a060020a0381166385b861886000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156116e657600080fd5b6102c65a03f115156116f757600080fd5b50505060405180519050151561170c57600080fd5b600b8054600160a060020a031916600160a060020a039290921691909117905550565b600160a060020a031660009081526008602052604090205490565b60005433600160a060020a0390811691161461176557600080fd5b60025460a060020a900460ff16151561177d57600080fd5b60138054600160a060020a031916600160a060020a0383161790557f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa44619930581604051600160a060020a03909116815260200160405180910390a150565b60055481565b60025433600160a060020a0390811691161480611809575060005433600160a060020a039081169116145b80611822575060015433600160a060020a039081169116145b151561182d57600080fd5b60025460a060020a900460ff161561184457600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b611872612fa0565b600061187c612fa0565b600080600061188a8761172f565b94508415156118ba5760006040518059106118a25750595b90808252806020026020018201604052509550611941565b846040518059106118c85750595b908082528060200260200182016040525093506118e3610ef1565b925060009150600190505b82811161193d57600081815260076020526040902054600160a060020a0388811691161415611935578084838151811061192457fe5b602090810290910101526001909101905b6001016118ee565b8395505b5050505050919050565b600080600080600080600080600260149054906101000a900460ff1615151561197357600080fd5b600680548a90811061198157fe5b60009182526020909120600290910201600181015490975067ffffffffffffffff1615156119ae57600080fd5b611a438761010060405190810160409081528254825260019092015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152612b9c565b1515611a4e57600080fd5b60018701546006805460c060020a90920463ffffffff1697509087908110611a7257fe5b600091825260209091206001808a015460029093029091019081015490965061ffff60f060020a92839004811696509190041684901115611ac057600185015460f060020a900461ffff1693505b6010548754865460018a0154600160a060020a0390931692630d9f5aed92919068010000000000000000900467ffffffffffffffff166000190160006040516020015260405160e060020a63ffffffff86160281526004810193909352602483019190915267ffffffffffffffff166044820152606401602060405180830381600087803b1515611b5057600080fd5b6102c65a03f11515611b6157600080fd5b505050604051805160008b81526007602052604090205460018a810154929650600160a060020a039091169450611bb092508b9160c060020a900463ffffffff1690870161ffff1686866128f0565b6001880180547bffffffff00000000000000000000000000000000000000000000000019169055600f8054600019019055600e54909150600160a060020a0333169080156108fc0290604051600060405180830381858888f150939c9b505050505050505050505050565b60025433600160a060020a0390811691161480611c46575060005433600160a060020a039081169116145b80611c5f575060015433600160a060020a039081169116145b1515611c6a57600080fd5b600b54600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515611ca957600080fd5b6102c65a03f11515611cba57600080fd5b5050600c54600160a060020a03169050635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515611cfd57600080fd5b6102c65a03f11515610fdf57600080fd5b60408051908101604052600281527f434b000000000000000000000000000000000000000000000000000000000000602082015281565b600381600e8110611d5257fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b600760205260009081526040902054600160a060020a031681565b60025460a060020a900460ff1615611da457600080fd5b600160a060020a0382161515611db957600080fd5b30600160a060020a031682600160a060020a031614151515611dda57600080fd5b600b54600160a060020a0383811691161415611df557600080fd5b600c54600160a060020a0383811691161415611e1057600080fd5b611e1a3382612572565b1515611e2557600080fd5b6116453383836125e0565b600254600160a060020a031681565b600e5481565b600d54600160a060020a031681565b60025460009033600160a060020a03908116911614611e7257600080fd5b60125461afc89010611e8357600080fd5b611e92600080600085306128f0565b600b54909150611eac908290600160a060020a0316612592565b600b54600160a060020a03166327ebe40a82611ec6612bd4565b6000620151803060405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b1515611f2657600080fd5b6102c65a03f11515611f3757600080fd5b5050601280546001019055505050565b600080808311611f5657600080fd5b6006805484908110611f6457fe5b906000526020600020906002020190506120098161010060405190810160409081528254825260019092015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152612c82565b9392505050565b61138881565b60005433600160a060020a0390811691161461203157600080fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b600b54600160a060020a031681565b600080600080600080600080600080600060068c81548110151561208257fe5b906000526020600020906002020190508060010160189054906101000a900463ffffffff1663ffffffff16600014159a50438160010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115995080600101601c9054906101000a900461ffff1661ffff1698508060010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1697508060010160189054906101000a900463ffffffff1663ffffffff1696508060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1695508060010160109054906101000a900463ffffffff1663ffffffff1694508060010160149054906101000a900463ffffffff1663ffffffff16935080600101601e9054906101000a900461ffff1661ffff16925080600001549150509193959799509193959799565b60025460009060a060020a900460ff16156121dd57600080fd5b6121e73383612572565b15156121f257600080fd5b6121fb82611f47565b151561220657600080fd5b6122108284612cb9565b151561221b57600080fd5b600c54600160a060020a031663c55d0f568460006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561226c57600080fd5b6102c65a03f1151561227d57600080fd5b5050506040518051600e549092508201341015905061229b57600080fd5b600c54600e54600160a060020a039091169063454a2ab39034038560405160e060020a63ffffffff851602815260048101919091526024016000604051808303818588803b15156122eb57600080fd5b6125ee5a03f115156122fc57600080fd5b50505050610fdf8263ffffffff168463ffffffff16612d08565b60125481565b601054600160a060020a031681565b600254600090819060a060020a900460ff161561234757600080fd5b600e5434101561235657600080fd5b6123603385612572565b151561236b57600080fd5b612375838561289b565b151561238057600080fd5b600680548590811061238e57fe5b906000526020600020906002020191506124338261010060405190810160409081528254825260019092015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152612c82565b151561243e57600080fd5b600680548490811061244c57fe5b906000526020600020906002020190506124f18161010060405190810160409081528254825260019092015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152612c82565b15156124fc57600080fd5b6125088285838661271b565b151561251357600080fd5b61155a8484612d08565b612525612fa0565b61252d612fa0565b6000808460405180591061253e5750595b818152601f19601f8301168101602001604052905092505060208201905084612568828287612e72565b5090949350505050565b600090815260076020526040902054600160a060020a0391821691161490565b6000918252600960205260409091208054600160a060020a031916600160a060020a03909216919091179055565b600090815260096020526040902054600160a060020a0391821691161490565b600160a060020a03808316600081815260086020908152604080832080546001019055858352600790915290208054600160a060020a031916909117905583161561267357600160a060020a03831660009081526008602090815260408083208054600019019055838352600a82528083208054600160a060020a03199081169091556009909252909120805490911690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b60005433600160a060020a039081169116146126e357600080fd5b60025460a060020a900460ff1615156126fb57600080fd5b6002805474ff000000000000000000000000000000000000000019169055565b60008184141561272d57506000612893565b6001850154608060020a900463ffffffff1682148061275c5750600185015460a060020a900463ffffffff1682145b1561276957506000612893565b6001830154608060020a900463ffffffff168414806127985750600183015460a060020a900463ffffffff1684145b156127a557506000612893565b6001830154608060020a900463ffffffff1615806127d257506001850154608060020a900463ffffffff16155b156127df57506001612893565b60018581015490840154608060020a9182900463ffffffff9081169290910416148061282a575060018086015490840154608060020a900463ffffffff90811660a060020a90920416145b1561283757506000612893565b6001808601549084015460a060020a900463ffffffff908116608060020a90920416148061288257506001858101549084015460a060020a9182900463ffffffff9081169290910416145b1561288f57506000612893565b5060015b949350505050565b6000818152600760205260408082205484835290822054600160a060020a0391821691168082148061133e57506000858152600a6020526040902054600160a060020a03908116908316149250505092915050565b6000806128fb612fdb565b600063ffffffff8916891461290f57600080fd5b63ffffffff8816881461292157600080fd5b61ffff8716871461293157600080fd5b600287049250600d8361ffff16111561294957600d92505b610100604051908101604090815287825267ffffffffffffffff42166020830152600090820181905263ffffffff808c1660608401528a16608083015260a082015261ffff80851660c0830152881660e0820152600680549193506001918083016129b4838261301f565b6000928352602090922085916002020181518155602082015160018201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060c082015181600101601c6101000a81548161ffff021916908361ffff16021790555060e08201516001909101805461ffff9290921660f060020a027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911790555003905063ffffffff81168114612b0f57600080fd5b7f0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad58582846060015163ffffffff16856080015163ffffffff168651604051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a1612b90600086836125e0565b98975050505050505050565b60008160a0015163ffffffff1615801590610c6f57504367ffffffffffffffff16826040015167ffffffffffffffff16111592915050565b600b5460009081908190600160a060020a031663eac9d94c82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612c2257600080fd5b6102c65a03f11515612c3357600080fd5b50505060405180519250506fffffffffffffffffffffffffffffffff82168214612c5c57600080fd5b50600281048101662386f26fc10000811015612c7c5750662386f26fc100005b92915050565b60008160a0015163ffffffff16158015610c6f57504367ffffffffffffffff16826040015167ffffffffffffffff16111592915050565b6000806000600685815481101515612ccd57fe5b90600052602060002090600202019150600684815481101515612cec57fe5b9060005260206000209060020201905061133e8286838761271b565b600080600683815481101515612d1a57fe5b90600052602060002090600202019150600684815481101515612d3957fe5b600091825260209091206002909102016001810180547bffffffff000000000000000000000000000000000000000000000000191660c060020a63ffffffff8716021790559050612d8982612eb7565b612d9281612eb7565b6000848152600a602090815260408083208054600160a060020a031990811690915586845281842080549091169055600f8054600190810190915587845260079092529182902054908301547f241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b8092600160a060020a0390921691879187916801000000000000000090910467ffffffffffffffff1690518085600160a060020a0316600160a060020a031681526020018481526020018381526020018267ffffffffffffffff16815260200194505050505060405180910390a150505050565b60005b60208210612e985782518452602084019350602083019250602082039150612e75565b6001826020036101000a03905080198351168185511617909352505050565b600554600182015443919060039060e060020a900461ffff16600e8110612eda57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16811515612f0557fe5b6001840180546fffffffffffffffff0000000000000000191668010000000000000000939092049390930167ffffffffffffffff16919091021790819055600d60e060020a90910461ffff161015612f9d576001818101805461ffff60e060020a8083048216909401169092027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911790555b50565b60206040519081016040526000815290565b60806040519081016040526004815b60008152600019919091019060200181612fc15790505090565b6101006040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082015290565b815481835581811511610fdf57600083815260209020610fdf91610ef99160029182028101918502015b808211156130635760008082556001820155600201613049565b50905600a165627a7a72305820a6465fc1ce7ab1a92906ff7206b23d80a21bbd50b85b4bde6a91f8e6b2e3edde0029\",\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pregnantKitties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"isPregnant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sireAllowedToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kittyIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"approveSiring\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"giveBirth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kittyIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getKitty\",\"outputs\":[{\"name\":\"isGestating\",\"type\":\"bool\"},{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"siringWithId\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kittyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}],\"contractName\":\"CryptoKitties\",\"source\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  function Ownable() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner {\\n    if (newOwner != address(0)) {\\n      owner = newOwner;\\n    }\\n  }\\n\\n}\\n\\n\\n\\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\\n/// @author Dieter Shirley <[email protected]> (https://github.com/dete)\\ncontract ERC721 {\\n    // Required methods\\n    function totalSupply() public view returns (uint256 total);\\n    function balanceOf(address _owner) public view returns (uint256 balance);\\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\\n    function approve(address _to, uint256 _tokenId) external;\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    // Events\\n    event Transfer(address from, address to, uint256 tokenId);\\n    event Approval(address owner, address approved, uint256 tokenId);\\n\\n    // Optional\\n    // function name() public view returns (string name);\\n    // function symbol() public view returns (string symbol);\\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\\n\\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\\n}\\n\\n\\n// // Auction wrapper functions\\n\\n\\n// Auction wrapper functions\\n\\n\\n\\n\\n\\n\\n\\n/// @title SEKRETOOOO\\ncontract GeneScienceInterface {\\n    /// @dev simply a boolean to indicate this is the contract we expect to be\\n    function isGeneScience() public pure returns (bool);\\n\\n    /// @dev given genes of kitten 1 & 2, return a genetic combination - may have a random factor\\n    /// @param genes1 genes of mom\\n    /// @param genes2 genes of sire\\n    /// @return the genes that are supposed to be passed down the child\\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);\\n}\\n\\n\\n\\n\\n\\n\\n\\n/// @title A facet of KittyCore that manages special access privileges.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev See the KittyCore contract documentation to understand how the various contract facets are arranged.\\ncontract KittyAccessControl {\\n    // This facet controls access control for CryptoKitties. There are four roles managed here:\\n    //\\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\\n    //         set to the address that created the smart contract in the KittyCore constructor.\\n    //\\n    //     - The CFO: The CFO can withdraw funds from KittyCore and its auction contracts.\\n    //\\n    //     - The COO: The COO can release gen0 kitties to auction, and mint promo cats.\\n    //\\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\\n    // account.\\n\\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\\n    event ContractUpgrade(address newContract);\\n\\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\\n    address public ceoAddress;\\n    address public cfoAddress;\\n    address public cooAddress;\\n\\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\\n    bool public paused = false;\\n\\n    /// @dev Access modifier for CEO-only functionality\\n    modifier onlyCEO() {\\n        require(msg.sender == ceoAddress);\\n        _;\\n    }\\n\\n    /// @dev Access modifier for CFO-only functionality\\n    modifier onlyCFO() {\\n        require(msg.sender == cfoAddress);\\n        _;\\n    }\\n\\n    /// @dev Access modifier for COO-only functionality\\n    modifier onlyCOO() {\\n        require(msg.sender == cooAddress);\\n        _;\\n    }\\n\\n    modifier onlyCLevel() {\\n        require(\\n            msg.sender == cooAddress ||\\n            msg.sender == ceoAddress ||\\n            msg.sender == cfoAddress\\n        );\\n        _;\\n    }\\n\\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\\n    /// @param _newCEO The address of the new CEO\\n    function setCEO(address _newCEO) external onlyCEO {\\n        require(_newCEO != address(0));\\n\\n        ceoAddress = _newCEO;\\n    }\\n\\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\\n    /// @param _newCFO The address of the new CFO\\n    function setCFO(address _newCFO) external onlyCEO {\\n        require(_newCFO != address(0));\\n\\n        cfoAddress = _newCFO;\\n    }\\n\\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\\n    /// @param _newCOO The address of the new COO\\n    function setCOO(address _newCOO) external onlyCEO {\\n        require(_newCOO != address(0));\\n\\n        cooAddress = _newCOO;\\n    }\\n\\n    /*** Pausable functionality adapted from OpenZeppelin ***/\\n\\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /// @dev Modifier to allow actions only when the contract IS paused\\n    modifier whenPaused {\\n        require(paused);\\n        _;\\n    }\\n\\n    /// @dev Called by any \\\"C-level\\\" role to pause the contract. Used only when\\n    ///  a bug or exploit is detected and we need to limit damage.\\n    function pause() external onlyCLevel whenNotPaused {\\n        paused = true;\\n    }\\n\\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\\n    ///  one reason we may pause the contract is when CFO or COO accounts are\\n    ///  compromised.\\n    /// @notice This is public rather than external so it can be called by\\n    ///  derived contracts.\\n    function unpause() public onlyCEO whenPaused {\\n        // can't unpause if contract was upgraded\\n        paused = false;\\n    }\\n}\\n\\n\\n\\n\\n/// @title Base contract for CryptoKitties. Holds all common structs, events and base variables.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev See the KittyCore contract documentation to understand how the various contract facets are arranged.\\ncontract KittyBase is KittyAccessControl {\\n    /*** EVENTS ***/\\n\\n    /// @dev The Birth event is fired whenever a new kitten comes into existence. This obviously\\n    ///  includes any time a cat is created through the giveBirth method, but it is also called\\n    ///  when a new gen0 cat is created.\\n    event Birth(address owner, uint256 kittyId, uint256 matronId, uint256 sireId, uint256 genes);\\n\\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a kitten\\n    ///  ownership is assigned, including births.\\n    event Transfer(address from, address to, uint256 tokenId);\\n\\n    /*** DATA TYPES ***/\\n\\n    /// @dev The main Kitty struct. Every cat in CryptoKitties is represented by a copy\\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\\n    ///  is important because of the byte-packing rules used by Ethereum.\\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\\n    struct Kitty {\\n        // The Kitty's genetic code is packed into these 256-bits, the format is\\n        // sooper-sekret! A cat's genes never change.\\n        uint256 genes;\\n\\n        // The timestamp from the block when this cat came into existence.\\n        uint64 birthTime;\\n\\n        // The minimum timestamp after which this cat can engage in breeding\\n        // activities again. This same timestamp is used for the pregnancy\\n        // timer (for matrons) as well as the siring cooldown.\\n        uint64 cooldownEndBlock;\\n\\n        // The ID of the parents of this kitty, set to 0 for gen0 cats.\\n        // Note that using 32-bit unsigned integers limits us to a \\\"mere\\\"\\n        // 4 billion cats. This number might seem small until you realize\\n        // that Ethereum currently has a limit of about 500 million\\n        // transactions per year! So, this definitely won't be a problem\\n        // for several years (even as Ethereum learns to scale).\\n        uint32 matronId;\\n        uint32 sireId;\\n\\n        // Set to the ID of the sire cat for matrons that are pregnant,\\n        // zero otherwise. A non-zero value here is how we know a cat\\n        // is pregnant. Used to retrieve the genetic material for the new\\n        // kitten when the birth transpires.\\n        uint32 siringWithId;\\n\\n        // Set to the index in the cooldown array (see below) that represents\\n        // the current cooldown duration for this Kitty. This starts at zero\\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\\n        // Incremented by one for each successful breeding action, regardless\\n        // of whether this cat is acting as matron or sire.\\n        uint16 cooldownIndex;\\n\\n        // The \\\"generation number\\\" of this cat. Cats minted by the CK contract\\n        // for sale are called \\\"gen0\\\" and have a generation number of 0. The\\n        // generation number of all other cats is the larger of the two generation\\n        // numbers of their parents, plus one.\\n        // (i.e. max(matron.generation, sire.generation) + 1)\\n        uint16 generation;\\n    }\\n\\n    /*** CONSTANTS ***/\\n\\n    /// @dev A lookup table indicating the cooldown duration after any successful\\n    ///  breeding action, called \\\"pregnancy time\\\" for matrons and \\\"siring cooldown\\\"\\n    ///  for sires. Designed such that the cooldown roughly doubles each time a cat\\n    ///  is bred, encouraging owners not to just keep breeding the same cat over\\n    ///  and over again. Caps out at one week (a cat can breed an unbounded number\\n    ///  of times, and the maximum cooldown is always seven days).\\n    uint32[14] public cooldowns = [\\n        uint32(1 minutes),\\n        uint32(2 minutes),\\n        uint32(5 minutes),\\n        uint32(10 minutes),\\n        uint32(30 minutes),\\n        uint32(1 hours),\\n        uint32(2 hours),\\n        uint32(4 hours),\\n        uint32(8 hours),\\n        uint32(16 hours),\\n        uint32(1 days),\\n        uint32(2 days),\\n        uint32(4 days),\\n        uint32(7 days)\\n    ];\\n\\n    // An approximation of currently how many seconds are in between blocks.\\n    uint256 public secondsPerBlock = 15;\\n\\n    /*** STORAGE ***/\\n\\n    /// @dev An array containing the Kitty struct for all Kitties in existence. The ID\\n    ///  of each cat is actually an index into this array. Note that ID 0 is a negacat,\\n    ///  the unKitty, the mythical beast that is the parent of all gen0 cats. A bizarre\\n    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\\n    ///  In other words, cat ID 0 is invalid... ;-)\\n    Kitty[] kitties;\\n\\n    /// @dev A mapping from cat IDs to the address that owns them. All cats have\\n    ///  some valid owner address, even gen0 cats are created with a non-zero owner.\\n    mapping (uint256 => address) public kittyIndexToOwner;\\n\\n    // @dev A mapping from owner address to count of tokens that address owns.\\n    //  Used internally inside balanceOf() to resolve ownership count.\\n    mapping (address => uint256) ownershipTokenCount;\\n\\n    /// @dev A mapping from KittyIDs to an address that has been approved to call\\n    ///  transferFrom(). Each Kitty can only have one approved address for transfer\\n    ///  at any time. A zero value means no approval is outstanding.\\n    mapping (uint256 => address) public kittyIndexToApproved;\\n\\n    /// @dev A mapping from KittyIDs to an address that has been approved to use\\n    ///  this Kitty for siring via breedWith(). Each Kitty can only have one approved\\n    ///  address for siring at any time. A zero value means no approval is outstanding.\\n    mapping (uint256 => address) public sireAllowedToAddress;\\n\\n    /// @dev The address of the ClockAuction contract that handles sales of Kitties. This\\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\\n    ///  initiated every 15 minutes.\\n    SaleClockAuction public saleAuction;\\n\\n    /// @dev The address of a custom ClockAuction subclassed contract that handles siring\\n    ///  auctions. Needs to be separate from saleAuction because the actions taken on success\\n    ///  after a sales and siring auction are quite different.\\n    SiringClockAuction public siringAuction;\\n\\n    /// @dev Assigns ownership of a specific Kitty to an address.\\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\\n        // Since the number of kittens is capped to 2^32 we can't overflow this\\n        ownershipTokenCount[_to]++;\\n        // transfer ownership\\n        kittyIndexToOwner[_tokenId] = _to;\\n        // When creating new kittens _from is 0x0, but we can't account that address.\\n        if (_from != address(0)) {\\n            ownershipTokenCount[_from]--;\\n            // once the kitten is transferred also clear sire allowances\\n            delete sireAllowedToAddress[_tokenId];\\n            // clear any previously approved ownership exchange\\n            delete kittyIndexToApproved[_tokenId];\\n        }\\n        // Emit the transfer event.\\n        Transfer(_from, _to, _tokenId);\\n    }\\n\\n    /// @dev An internal method that creates a new kitty and stores it. This\\n    ///  method doesn't do any checking and should only be called when the\\n    ///  input data is known to be valid. Will generate both a Birth event\\n    ///  and a Transfer event.\\n    /// @param _matronId The kitty ID of the matron of this cat (zero for gen0)\\n    /// @param _sireId The kitty ID of the sire of this cat (zero for gen0)\\n    /// @param _generation The generation number of this cat, must be computed by caller.\\n    /// @param _genes The kitty's genetic code.\\n    /// @param _owner The inital owner of this cat, must be non-zero (except for the unKitty, ID 0)\\n    function _createKitty(\\n        uint256 _matronId,\\n        uint256 _sireId,\\n        uint256 _generation,\\n        uint256 _genes,\\n        address _owner\\n    )\\n        internal\\n        returns (uint)\\n    {\\n        // These requires are not strictly necessary, our calling code should make\\n        // sure that these conditions are never broken. However! _createKitty() is already\\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\\n        // to ensure our data structures are always valid.\\n        require(_matronId == uint256(uint32(_matronId)));\\n        require(_sireId == uint256(uint32(_sireId)));\\n        require(_generation == uint256(uint16(_generation)));\\n\\n        // New kitty starts with the same cooldown as parent gen/2\\n        uint16 cooldownIndex = uint16(_generation / 2);\\n        if (cooldownIndex > 13) {\\n            cooldownIndex = 13;\\n        }\\n\\n        Kitty memory _kitty = Kitty({\\n            genes: _genes,\\n            birthTime: uint64(now),\\n            cooldownEndBlock: 0,\\n            matronId: uint32(_matronId),\\n            sireId: uint32(_sireId),\\n            siringWithId: 0,\\n            cooldownIndex: cooldownIndex,\\n            generation: uint16(_generation)\\n        });\\n        uint256 newKittenId = kitties.push(_kitty) - 1;\\n\\n        // It's probably never going to happen, 4 billion cats is A LOT, but\\n        // let's just be 100% sure we never let this happen.\\n        require(newKittenId == uint256(uint32(newKittenId)));\\n\\n        // emit the birth event\\n        Birth(\\n            _owner,\\n            newKittenId,\\n            uint256(_kitty.matronId),\\n            uint256(_kitty.sireId),\\n            _kitty.genes\\n        );\\n\\n        // This will assign ownership, and also emit the Transfer event as\\n        // per ERC721 draft\\n        _transfer(0, _owner, newKittenId);\\n\\n        return newKittenId;\\n    }\\n\\n    // Any C-level can fix how many seconds per blocks are currently observed.\\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\\n        require(secs < cooldowns[0]);\\n        secondsPerBlock = secs;\\n    }\\n}\\n\\n\\n\\n\\n\\n/// @title The external contract that is responsible for generating metadata for the kitties,\\n///  it has one function that will return the data as bytes.\\ncontract ERC721Metadata {\\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\\n    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\\n        if (_tokenId == 1) {\\n            buffer[0] = \\\"Hello World! :D\\\";\\n            count = 15;\\n        } else if (_tokenId == 2) {\\n            buffer[0] = \\\"I would definitely choose a medi\\\";\\n            buffer[1] = \\\"um length string.\\\";\\n            count = 49;\\n        } else if (_tokenId == 3) {\\n            buffer[0] = \\\"Lorem ipsum dolor sit amet, mi e\\\";\\n            buffer[1] = \\\"st accumsan dapibus augue lorem,\\\";\\n            buffer[2] = \\\" tristique vestibulum id, libero\\\";\\n            buffer[3] = \\\" suscipit varius sapien aliquam.\\\";\\n            count = 128;\\n        }\\n    }\\n}\\n\\n\\n/// @title The facet of the CryptoKitties core contract that manages ownership, ERC-721 (draft) compliant.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\\n///  See the KittyCore contract documentation to understand how the various contract facets are arranged.\\ncontract KittyOwnership is KittyBase, ERC721 {\\n\\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\\n    string public constant name = \\\"CryptoKitties\\\";\\n    string public constant symbol = \\\"CK\\\";\\n\\n    // The contract that will return kitty metadata\\n    ERC721Metadata public erc721Metadata;\\n\\n    bytes4 constant InterfaceSignature_ERC165 =\\n        bytes4(keccak256('supportsInterface(bytes4)'));\\n\\n    bytes4 constant InterfaceSignature_ERC721 =\\n        bytes4(keccak256('name()')) ^\\n        bytes4(keccak256('symbol()')) ^\\n        bytes4(keccak256('totalSupply()')) ^\\n        bytes4(keccak256('balanceOf(address)')) ^\\n        bytes4(keccak256('ownerOf(uint256)')) ^\\n        bytes4(keccak256('approve(address,uint256)')) ^\\n        bytes4(keccak256('transfer(address,uint256)')) ^\\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\\n        bytes4(keccak256('tokensOfOwner(address)')) ^\\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\\n\\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\\n    ///  ERC-165 (obviously!) and ERC-721.\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\\n    {\\n        // DEBUG ONLY\\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\\n\\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\\n    }\\n\\n    /// @dev Set the address of the sibling contract that tracks metadata.\\n    ///  CEO only.\\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\\n        erc721Metadata = ERC721Metadata(_contractAddress);\\n    }\\n\\n    // Internal utility functions: These functions all assume that their input arguments\\n    // are valid. We leave it to public methods to sanitize their inputs and follow\\n    // the required logic.\\n\\n    /// @dev Checks if a given address is the current owner of a particular Kitty.\\n    /// @param _claimant the address we are validating against.\\n    /// @param _tokenId kitten id, only valid when > 0\\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\\n        return kittyIndexToOwner[_tokenId] == _claimant;\\n    }\\n\\n    /// @dev Checks if a given address currently has transferApproval for a particular Kitty.\\n    /// @param _claimant the address we are confirming kitten is approved for.\\n    /// @param _tokenId kitten id, only valid when > 0\\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\\n        return kittyIndexToApproved[_tokenId] == _claimant;\\n    }\\n\\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\\n    ///  _approve() and transferFrom() are used together for putting Kitties on auction, and\\n    ///  there is no value in spamming the log with Approval events in that case.\\n    function _approve(uint256 _tokenId, address _approved) internal {\\n        kittyIndexToApproved[_tokenId] = _approved;\\n    }\\n\\n    /// @notice Returns the number of Kitties owned by a specific address.\\n    /// @param _owner The owner address to check.\\n    /// @dev Required for ERC-721 compliance\\n    function balanceOf(address _owner) public view returns (uint256 count) {\\n        return ownershipTokenCount[_owner];\\n    }\\n\\n    /// @notice Transfers a Kitty to another address. If transferring to a smart\\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\\n    ///  CryptoKitties specifically) or your Kitty may be lost forever. Seriously.\\n    /// @param _to The address of the recipient, can be a user or contract.\\n    /// @param _tokenId The ID of the Kitty to transfer.\\n    /// @dev Required for ERC-721 compliance.\\n    function transfer(\\n        address _to,\\n        uint256 _tokenId\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Safety check to prevent against an unexpected 0x0 default.\\n        require(_to != address(0));\\n        // Disallow transfers to this contract to prevent accidental misuse.\\n        // The contract should never own any kitties (except very briefly\\n        // after a gen0 cat is created and before it goes on auction).\\n        require(_to != address(this));\\n        // Disallow transfers to the auction contracts to prevent accidental\\n        // misuse. Auction contracts should only take ownership of kitties\\n        // through the allow + transferFrom flow.\\n        require(_to != address(saleAuction));\\n        require(_to != address(siringAuction));\\n\\n        // You can only send your own cat.\\n        require(_owns(msg.sender, _tokenId));\\n\\n        // Reassign ownership, clear pending approvals, emit Transfer event.\\n        _transfer(msg.sender, _to, _tokenId);\\n    }\\n\\n    /// @notice Grant another address the right to transfer a specific Kitty via\\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\\n    ///  clear all approvals.\\n    /// @param _tokenId The ID of the Kitty that can be transferred if this call succeeds.\\n    /// @dev Required for ERC-721 compliance.\\n    function approve(\\n        address _to,\\n        uint256 _tokenId\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Only an owner can grant transfer approval.\\n        require(_owns(msg.sender, _tokenId));\\n\\n        // Register the approval (replacing any previous approval).\\n        _approve(_tokenId, _to);\\n\\n        // Emit approval event.\\n        Approval(msg.sender, _to, _tokenId);\\n    }\\n\\n    /// @notice Transfer a Kitty owned by another address, for which the calling address\\n    ///  has previously been granted transfer approval by the owner.\\n    /// @param _from The address that owns the Kitty to be transfered.\\n    /// @param _to The address that should take ownership of the Kitty. Can be any address,\\n    ///  including the caller.\\n    /// @param _tokenId The ID of the Kitty to be transferred.\\n    /// @dev Required for ERC-721 compliance.\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Safety check to prevent against an unexpected 0x0 default.\\n        require(_to != address(0));\\n        // Disallow transfers to this contract to prevent accidental misuse.\\n        // The contract should never own any kitties (except very briefly\\n        // after a gen0 cat is created and before it goes on auction).\\n        require(_to != address(this));\\n        // Check for approval and valid ownership\\n        require(_approvedFor(msg.sender, _tokenId));\\n        require(_owns(_from, _tokenId));\\n\\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    /// @notice Returns the total number of Kitties currently in existence.\\n    /// @dev Required for ERC-721 compliance.\\n    function totalSupply() public view returns (uint) {\\n        return kitties.length - 1;\\n    }\\n\\n    /// @notice Returns the address currently assigned ownership of a given Kitty.\\n    /// @dev Required for ERC-721 compliance.\\n    function ownerOf(uint256 _tokenId)\\n        external\\n        view\\n        returns (address owner)\\n    {\\n        owner = kittyIndexToOwner[_tokenId];\\n\\n        require(owner != address(0));\\n    }\\n\\n    /// @notice Returns a list of all Kitty IDs assigned to an address.\\n    /// @param _owner The owner whose Kitties we are interested in.\\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\\n    ///  expensive (it walks the entire Kitty array looking for cats belonging to owner),\\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\\n    ///  not contract-to-contract calls.\\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\\n        uint256 tokenCount = balanceOf(_owner);\\n\\n        if (tokenCount == 0) {\\n            // Return an empty array\\n            return new uint256[](0);\\n        } else {\\n            uint256[] memory result = new uint256[](tokenCount);\\n            uint256 totalCats = totalSupply();\\n            uint256 resultIndex = 0;\\n\\n            // We count on the fact that all cats have IDs starting at 1 and increasing\\n            // sequentially up to the totalCat count.\\n            uint256 catId;\\n\\n            for (catId = 1; catId <= totalCats; catId++) {\\n                if (kittyIndexToOwner[catId] == _owner) {\\n                    result[resultIndex] = catId;\\n                    resultIndex++;\\n                }\\n            }\\n\\n            return result;\\n        }\\n    }\\n\\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <[email protected]>)\\n    ///  This method is licenced under the Apache License.\\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\\n        // Copy word-length chunks while possible\\n        for(; _len >= 32; _len -= 32) {\\n            assembly {\\n                mstore(_dest, mload(_src))\\n            }\\n            _dest += 32;\\n            _src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint256 mask = 256 ** (32 - _len) - 1;\\n        assembly {\\n            let srcpart := and(mload(_src), not(mask))\\n            let destpart := and(mload(_dest), mask)\\n            mstore(_dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <[email protected]>)\\n    ///  This method is licenced under the Apache License.\\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\\n        var outputString = new string(_stringLength);\\n        uint256 outputPtr;\\n        uint256 bytesPtr;\\n\\n        assembly {\\n            outputPtr := add(outputString, 32)\\n            bytesPtr := _rawBytes\\n        }\\n\\n        _memcpy(outputPtr, bytesPtr, _stringLength);\\n\\n        return outputString;\\n    }\\n\\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\\n    /// @param _tokenId The ID number of the Kitty whose metadata should be returned.\\n    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\\n        require(erc721Metadata != address(0));\\n        bytes32[4] memory buffer;\\n        uint256 count;\\n        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\\n\\n        return _toString(buffer, count);\\n    }\\n}\\n\\n\\n\\n/// @title A facet of KittyCore that manages Kitty siring, gestation, and birth.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev See the KittyCore contract documentation to understand how the various contract facets are arranged.\\ncontract KittyBreeding is KittyOwnership {\\n\\n    /// @dev The Pregnant event is fired when two cats successfully breed and the pregnancy\\n    ///  timer begins for the matron.\\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\\n\\n    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards\\n    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by\\n    ///  the COO role as the gas price changes.\\n    uint256 public autoBirthFee = 2 finney;\\n\\n    // Keeps track of number of pregnant kitties.\\n    uint256 public pregnantKitties;\\n\\n    /// @dev The address of the sibling contract that is used to implement the sooper-sekret\\n    ///  genetic combination algorithm.\\n    GeneScienceInterface public geneScience;\\n\\n    /// @dev Update the address of the genetic contract, can only be called by the CEO.\\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\\n    function setGeneScienceAddress(address _address) external onlyCEO {\\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\\n\\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\\n        require(candidateContract.isGeneScience());\\n\\n        // Set the new contract address\\n        geneScience = candidateContract;\\n    }\\n\\n    /// @dev Checks that a given kitten is able to breed. Requires that the\\n    ///  current cooldown is finished (for sires) and also checks that there is\\n    ///  no pending pregnancy.\\n    function _isReadyToBreed(Kitty _kit) internal view returns (bool) {\\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\\n        // the cat has a pending birth; there can be some period of time between the end\\n        // of the pregnacy timer and the birth event.\\n        return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\\n    }\\n\\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\\n    ///  and matron have the same owner, or if the sire has given siring permission to\\n    ///  the matron's owner (via approveSiring()).\\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\\n        address matronOwner = kittyIndexToOwner[_matronId];\\n        address sireOwner = kittyIndexToOwner[_sireId];\\n\\n        // Siring is okay if they have same owner, or if the matron's owner was given\\n        // permission to breed with this sire.\\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\\n    }\\n\\n    /// @dev Set the cooldownEndTime for the given Kitty, based on its current cooldownIndex.\\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\\n    /// @param _kitten A reference to the Kitty in storage which needs its timer started.\\n    function _triggerCooldown(Kitty storage _kitten) internal {\\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\\n        _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex]/secondsPerBlock) + block.number);\\n\\n        // Increment the breeding count, clamping it at 13, which is the length of the\\n        // cooldowns array. We could check the array size dynamically, but hard-coding\\n        // this as a constant saves gas. Yay, Solidity!\\n        if (_kitten.cooldownIndex < 13) {\\n            _kitten.cooldownIndex += 1;\\n        }\\n    }\\n\\n    /// @notice Grants approval to another user to sire with one of your Kitties.\\n    /// @param _addr The address that will be able to sire with your Kitty. Set to\\n    ///  address(0) to clear all siring approvals for this Kitty.\\n    /// @param _sireId A Kitty that you own that _addr will now be able to sire with.\\n    function approveSiring(address _addr, uint256 _sireId)\\n        external\\n        whenNotPaused\\n    {\\n        require(_owns(msg.sender, _sireId));\\n        sireAllowedToAddress[_sireId] = _addr;\\n    }\\n\\n    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only\\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\\n    ///  by the autobirth daemon).\\n    function setAutoBirthFee(uint256 val) external onlyCOO {\\n        autoBirthFee = val;\\n    }\\n\\n    /// @dev Checks to see if a given Kitty is pregnant and (if so) if the gestation\\n    ///  period has passed.\\n    function _isReadyToGiveBirth(Kitty _matron) private view returns (bool) {\\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\\n    }\\n\\n    /// @notice Checks that a given kitten is able to breed (i.e. it is not pregnant or\\n    ///  in the middle of a siring cooldown).\\n    /// @param _kittyId reference the id of the kitten, any user can inquire about it\\n    function isReadyToBreed(uint256 _kittyId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(_kittyId > 0);\\n        Kitty storage kit = kitties[_kittyId];\\n        return _isReadyToBreed(kit);\\n    }\\n\\n    /// @dev Checks whether a kitty is currently pregnant.\\n    /// @param _kittyId reference the id of the kitten, any user can inquire about it\\n    function isPregnant(uint256 _kittyId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(_kittyId > 0);\\n        // A kitty is pregnant if and only if this field is set\\n        return kitties[_kittyId].siringWithId != 0;\\n    }\\n\\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT\\n    ///  check ownership permissions (that is up to the caller).\\n    /// @param _matron A reference to the Kitty struct of the potential matron.\\n    /// @param _matronId The matron's ID.\\n    /// @param _sire A reference to the Kitty struct of the potential sire.\\n    /// @param _sireId The sire's ID\\n    function _isValidMatingPair(\\n        Kitty storage _matron,\\n        uint256 _matronId,\\n        Kitty storage _sire,\\n        uint256 _sireId\\n    )\\n        private\\n        view\\n        returns(bool)\\n    {\\n        // A Kitty can't breed with itself!\\n        if (_matronId == _sireId) {\\n            return false;\\n        }\\n\\n        // Kitties can't breed with their parents.\\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\\n            return false;\\n        }\\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\\n            return false;\\n        }\\n\\n        // We can short circuit the sibling check (below) if either cat is\\n        // gen zero (has a matron ID of zero).\\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\\n            return true;\\n        }\\n\\n        // Kitties can't breed with full or half siblings.\\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\\n            return false;\\n        }\\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\\n            return false;\\n        }\\n\\n        // Everything seems cool! Let's get DTF.\\n        return true;\\n    }\\n\\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\\n    ///  breeding via auction (i.e. skips ownership and siring approval checks).\\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Kitty storage matron = kitties[_matronId];\\n        Kitty storage sire = kitties[_sireId];\\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\\n    }\\n\\n    /// @notice Checks to see if two cats can breed together, including checks for\\n    ///  ownership and siring approvals. Does NOT check that both cats are ready for\\n    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).\\n    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?\\n    /// @param _matronId The ID of the proposed matron.\\n    /// @param _sireId The ID of the proposed sire.\\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\\n        external\\n        view\\n        returns(bool)\\n    {\\n        require(_matronId > 0);\\n        require(_sireId > 0);\\n        Kitty storage matron = kitties[_matronId];\\n        Kitty storage sire = kitties[_sireId];\\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\\n            _isSiringPermitted(_sireId, _matronId);\\n    }\\n\\n    /// @dev Internal utility function to initiate breeding, assumes that all breeding\\n    ///  requirements have been checked.\\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\\n        // Grab a reference to the Kitties from storage.\\n        Kitty storage sire = kitties[_sireId];\\n        Kitty storage matron = kitties[_matronId];\\n\\n        // Mark the matron as pregnant, keeping track of who the sire is.\\n        matron.siringWithId = uint32(_sireId);\\n\\n        // Trigger the cooldown for both parents.\\n        _triggerCooldown(sire);\\n        _triggerCooldown(matron);\\n\\n        // Clear siring permission for both parents. This may not be strictly necessary\\n        // but it's likely to avoid confusion!\\n        delete sireAllowedToAddress[_matronId];\\n        delete sireAllowedToAddress[_sireId];\\n\\n        // Every time a kitty gets pregnant, counter is incremented.\\n        pregnantKitties++;\\n\\n        // Emit the pregnancy event.\\n        Pregnant(kittyIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\\n    }\\n\\n    /// @notice Breed a Kitty you own (as matron) with a sire that you own, or for which you\\n    ///  have previously been given Siring approval. Will either make your cat pregnant, or will\\n    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()\\n    /// @param _matronId The ID of the Kitty acting as matron (will end up pregnant if successful)\\n    /// @param _sireId The ID of the Kitty acting as sire (will begin its siring cooldown if successful)\\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        // Checks for payment.\\n        require(msg.value >= autoBirthFee);\\n\\n        // Caller must own the matron.\\n        require(_owns(msg.sender, _matronId));\\n\\n        // Neither sire nor matron are allowed to be on auction during a normal\\n        // breeding operation, but we don't need to check that explicitly.\\n        // For matron: The caller of this function can't be the owner of the matron\\n        //   because the owner of a Kitty on auction is the auction house, and the\\n        //   auction house will never call breedWith().\\n        // For sire: Similarly, a sire on auction will be owned by the auction house\\n        //   and the act of transferring ownership will have cleared any oustanding\\n        //   siring approval.\\n        // Thus we don't need to spend gas explicitly checking to see if either cat\\n        // is on auction.\\n\\n        // Check that matron and sire are both owned by caller, or that the sire\\n        // has given siring permission to caller (i.e. matron's owner).\\n        // Will fail for _sireId = 0\\n        require(_isSiringPermitted(_sireId, _matronId));\\n\\n        // Grab a reference to the potential matron\\n        Kitty storage matron = kitties[_matronId];\\n\\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\\n        require(_isReadyToBreed(matron));\\n\\n        // Grab a reference to the potential sire\\n        Kitty storage sire = kitties[_sireId];\\n\\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\\n        require(_isReadyToBreed(sire));\\n\\n        // Test that these cats are a valid mating pair.\\n        require(_isValidMatingPair(\\n            matron,\\n            _matronId,\\n            sire,\\n            _sireId\\n        ));\\n\\n        // All checks passed, kitty gets pregnant!\\n        _breedWith(_matronId, _sireId);\\n    }\\n\\n    /// @notice Have a pregnant Kitty give birth!\\n    /// @param _matronId A Kitty ready to give birth.\\n    /// @return The Kitty ID of the new kitten.\\n    /// @dev Looks at a given Kitty and, if pregnant and if the gestation period has passed,\\n    ///  combines the genes of the two parents to create a new kitten. The new Kitty is assigned\\n    ///  to the current owner of the matron. Upon successful completion, both the matron and the\\n    ///  new kitten will be ready to breed again. Note that anyone can call this function (if they\\n    ///  are willing to pay the gas!), but the new kitten always goes to the mother's owner.\\n    function giveBirth(uint256 _matronId)\\n        external\\n        whenNotPaused\\n        returns(uint256)\\n    {\\n        // Grab a reference to the matron in storage.\\n        Kitty storage matron = kitties[_matronId];\\n\\n        // Check that the matron is a valid cat.\\n        require(matron.birthTime != 0);\\n\\n        // Check that the matron is pregnant, and that its time has come!\\n        require(_isReadyToGiveBirth(matron));\\n\\n        // Grab a reference to the sire in storage.\\n        uint256 sireId = matron.siringWithId;\\n        Kitty storage sire = kitties[sireId];\\n\\n        // Determine the higher generation number of the two parents\\n        uint16 parentGen = matron.generation;\\n        if (sire.generation > matron.generation) {\\n            parentGen = sire.generation;\\n        }\\n\\n        // Call the sooper-sekret gene mixing operation.\\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\\n\\n        // Make the new kitten!\\n        address owner = kittyIndexToOwner[_matronId];\\n        uint256 kittenId = _createKitty(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\\n\\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\\n        // set is what marks a matron as being pregnant.)\\n        delete matron.siringWithId;\\n\\n        // Every time a kitty gives birth counter is decremented.\\n        pregnantKitties--;\\n\\n        // Send the balance fee to the person who made birth happen.\\n        msg.sender.send(autoBirthFee);\\n\\n        // return the new kitten's ID\\n        return kittenId;\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/// @title Auction Core\\n/// @dev Contains models, variables, and internal methods for the auction.\\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\\ncontract ClockAuctionBase {\\n\\n    // Represents an auction on an NFT\\n    struct Auction {\\n        // Current owner of NFT\\n        address seller;\\n        // Price (in wei) at beginning of auction\\n        uint128 startingPrice;\\n        // Price (in wei) at end of auction\\n        uint128 endingPrice;\\n        // Duration (in seconds) of auction\\n        uint64 duration;\\n        // Time when auction started\\n        // NOTE: 0 if this auction has been concluded\\n        uint64 startedAt;\\n    }\\n\\n    // Reference to contract tracking NFT ownership\\n    ERC721 public nonFungibleContract;\\n\\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\\n    // Values 0-10,000 map to 0%-100%\\n    uint256 public ownerCut;\\n\\n    // Map from token ID to their corresponding auction.\\n    mapping (uint256 => Auction) tokenIdToAuction;\\n\\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\\n    event AuctionCancelled(uint256 tokenId);\\n\\n    /// @dev Returns true if the claimant owns the token.\\n    /// @param _claimant - Address claiming to own the token.\\n    /// @param _tokenId - ID of token whose ownership to verify.\\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\\n    }\\n\\n    /// @dev Escrows the NFT, assigning ownership to this contract.\\n    /// Throws if the escrow fails.\\n    /// @param _owner - Current owner address of token to escrow.\\n    /// @param _tokenId - ID of token whose approval to verify.\\n    function _escrow(address _owner, uint256 _tokenId) internal {\\n        // it will throw if transfer fails\\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\\n    }\\n\\n    /// @dev Transfers an NFT owned by this contract to another address.\\n    /// Returns true if the transfer succeeds.\\n    /// @param _receiver - Address to transfer NFT to.\\n    /// @param _tokenId - ID of token to transfer.\\n    function _transfer(address _receiver, uint256 _tokenId) internal {\\n        // it will throw if transfer fails\\n        nonFungibleContract.transfer(_receiver, _tokenId);\\n    }\\n\\n    /// @dev Adds an auction to the list of open auctions. Also fires the\\n    ///  AuctionCreated event.\\n    /// @param _tokenId The ID of the token to be put on auction.\\n    /// @param _auction Auction to add.\\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\\n        // Require that all auctions have a duration of\\n        // at least one minute. (Keeps our math from getting hairy!)\\n        require(_auction.duration >= 1 minutes);\\n\\n        tokenIdToAuction[_tokenId] = _auction;\\n\\n        AuctionCreated(\\n            uint256(_tokenId),\\n            uint256(_auction.startingPrice),\\n            uint256(_auction.endingPrice),\\n            uint256(_auction.duration)\\n        );\\n    }\\n\\n    /// @dev Cancels an auction unconditionally.\\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\\n        _removeAuction(_tokenId);\\n        _transfer(_seller, _tokenId);\\n        AuctionCancelled(_tokenId);\\n    }\\n\\n    /// @dev Computes the price and transfers winnings.\\n    /// Does NOT transfer ownership of token.\\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        // Get a reference to the auction struct\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n\\n        // Explicitly check that this auction is currently live.\\n        // (Because of how Ethereum mappings work, we can't just count\\n        // on the lookup above failing. An invalid _tokenId will just\\n        // return an auction object that is all zeros.)\\n        require(_isOnAuction(auction));\\n\\n        // Check that the bid is greater than or equal to the current price\\n        uint256 price = _currentPrice(auction);\\n        require(_bidAmount >= price);\\n\\n        // Grab a reference to the seller before the auction struct\\n        // gets deleted.\\n        address seller = auction.seller;\\n\\n        // The bid is good! Remove the auction before sending the fees\\n        // to the sender so we can't have a reentrancy attack.\\n        _removeAuction(_tokenId);\\n\\n        // Transfer proceeds to seller (if there are any!)\\n        if (price > 0) {\\n            // Calculate the auctioneer's cut.\\n            // (NOTE: _computeCut() is guaranteed to return a\\n            // value <= price, so this subtraction can't go negative.)\\n            uint256 auctioneerCut = _computeCut(price);\\n            uint256 sellerProceeds = price - auctioneerCut;\\n\\n            // NOTE: Doing a transfer() in the middle of a complex\\n            // method like this is generally discouraged because of\\n            // reentrancy attacks and DoS attacks if the seller is\\n            // a contract with an invalid fallback function. We explicitly\\n            // guard against reentrancy attacks by removing the auction\\n            // before calling transfer(), and the only thing the seller\\n            // can DoS is the sale of their own asset! (And if it's an\\n            // accident, they can call cancelAuction(). )\\n            seller.transfer(sellerProceeds);\\n        }\\n\\n        // Calculate any excess funds included with the bid. If the excess\\n        // is anything worth worrying about, transfer it back to bidder.\\n        // NOTE: We checked above that the bid amount is greater than or\\n        // equal to the price so this cannot underflow.\\n        uint256 bidExcess = _bidAmount - price;\\n\\n        // Return the funds. Similar to the previous transfer, this is\\n        // not susceptible to a re-entry attack because the auction is\\n        // removed before any transfers occur.\\n        msg.sender.transfer(bidExcess);\\n\\n        // Tell the world!\\n        AuctionSuccessful(_tokenId, price, msg.sender);\\n\\n        return price;\\n    }\\n\\n    /// @dev Removes an auction from the list of open auctions.\\n    /// @param _tokenId - ID of NFT on auction.\\n    function _removeAuction(uint256 _tokenId) internal {\\n        delete tokenIdToAuction[_tokenId];\\n    }\\n\\n    /// @dev Returns true if the NFT is on auction.\\n    /// @param _auction - Auction to check.\\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\\n        return (_auction.startedAt > 0);\\n    }\\n\\n    /// @dev Returns current price of an NFT on auction. Broken into two\\n    ///  functions (this one, that computes the duration from the auction\\n    ///  structure, and the other that does the price computation) so we\\n    ///  can easily test that the price computation works correctly.\\n    function _currentPrice(Auction storage _auction)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 secondsPassed = 0;\\n\\n        // A bit of insurance against negative values (or wraparound).\\n        // Probably not necessary (since Ethereum guarnatees that the\\n        // now variable doesn't ever go backwards).\\n        if (now > _auction.startedAt) {\\n            secondsPassed = now - _auction.startedAt;\\n        }\\n\\n        return _computeCurrentPrice(\\n            _auction.startingPrice,\\n            _auction.endingPrice,\\n            _auction.duration,\\n            secondsPassed\\n        );\\n    }\\n\\n    /// @dev Computes the current price of an auction. Factored out\\n    ///  from _currentPrice so we can run extensive unit tests.\\n    ///  When testing, make this function public and turn on\\n    ///  `Current price computation` test suite.\\n    function _computeCurrentPrice(\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration,\\n        uint256 _secondsPassed\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // NOTE: We don't use SafeMath (or similar) in this function because\\n        //  all of our public functions carefully cap the maximum values for\\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\\n        //  also known to be non-zero (see the require() statement in\\n        //  _addAuction())\\n        if (_secondsPassed >= _duration) {\\n            // We've reached the end of the dynamic pricing portion\\n            // of the auction, just return the end price.\\n            return _endingPrice;\\n        } else {\\n            // Starting price can be higher than ending price (and often is!), so\\n            // this delta can be negative.\\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\\n\\n            // This multiplication can't overflow, _secondsPassed will easily fit within\\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\\n            // will always fit within 256-bits.\\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\\n\\n            // currentPriceChange can be negative, but if so, will have a magnitude\\n            // less that _startingPrice. Thus, this result will always end up positive.\\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\\n\\n            return uint256(currentPrice);\\n        }\\n    }\\n\\n    /// @dev Computes owner's cut of a sale.\\n    /// @param _price - Sale price of NFT.\\n    function _computeCut(uint256 _price) internal view returns (uint256) {\\n        // NOTE: We don't use SafeMath (or similar) in this function because\\n        //  all of our entry functions carefully cap the maximum values for\\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\\n        //  statement in the ClockAuction constructor). The result of this\\n        //  function is always guaranteed to be <= _price.\\n        return _price * ownerCut / 10000;\\n    }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev modifier to allow actions only when the contract IS paused\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev modifier to allow actions only when the contract IS NOT paused\\n   */\\n  modifier whenPaused {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused returns (bool) {\\n    paused = true;\\n    Pause();\\n    return true;\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused returns (bool) {\\n    paused = false;\\n    Unpause();\\n    return true;\\n  }\\n}\\n\\n\\n/// @title Clock auction for non-fungible tokens.\\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\\ncontract ClockAuction is Pausable, ClockAuctionBase {\\n\\n    /// @dev The ERC-165 interface signature for ERC-721.\\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\\n\\n    /// @dev Constructor creates a reference to the NFT ownership contract\\n    ///  and verifies the owner cut is in the valid range.\\n    /// @param _nftAddress - address of a deployed contract implementing\\n    ///  the Nonfungible Interface.\\n    /// @param _cut - percent cut the owner takes on each auction, must be\\n    ///  between 0-10,000.\\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\\n        require(_cut <= 10000);\\n        ownerCut = _cut;\\n\\n        ERC721 candidateContract = ERC721(_nftAddress);\\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\\n        nonFungibleContract = candidateContract;\\n    }\\n\\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\\n    ///  as well as any Ether sent directly to the contract address.\\n    ///  Always transfers to the NFT contract, but can be called either by\\n    ///  the owner or the NFT contract.\\n    function withdrawBalance() external {\\n        address nftAddress = address(nonFungibleContract);\\n\\n        require(\\n            msg.sender == owner ||\\n            msg.sender == nftAddress\\n        );\\n        // We are using this boolean method to make sure that even if one fails it will still work\\n        bool res = nftAddress.send(this.balance);\\n    }\\n\\n    /// @dev Creates and begins a new auction.\\n    /// @param _tokenId - ID of token to auction, sender must be owner.\\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\\n    /// @param _duration - Length of time to move between starting\\n    ///  price and ending price (in seconds).\\n    /// @param _seller - Seller, if not the message sender\\n    function createAuction(\\n        uint256 _tokenId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration,\\n        address _seller\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Sanity check that no inputs overflow how many bits we've allocated\\n        // to store them in the auction struct.\\n        require(_startingPrice == uint256(uint128(_startingPrice)));\\n        require(_endingPrice == uint256(uint128(_endingPrice)));\\n        require(_duration == uint256(uint64(_duration)));\\n\\n        require(_owns(msg.sender, _tokenId));\\n        _escrow(msg.sender, _tokenId);\\n        Auction memory auction = Auction(\\n            _seller,\\n            uint128(_startingPrice),\\n            uint128(_endingPrice),\\n            uint64(_duration),\\n            uint64(now)\\n        );\\n        _addAuction(_tokenId, auction);\\n    }\\n\\n    /// @dev Bids on an open auction, completing the auction and transferring\\n    ///  ownership of the NFT if enough Ether is supplied.\\n    /// @param _tokenId - ID of token to bid on.\\n    function bid(uint256 _tokenId)\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        // _bid will throw if the bid or funds transfer fails\\n        _bid(_tokenId, msg.value);\\n        _transfer(msg.sender, _tokenId);\\n    }\\n\\n    /// @dev Cancels an auction that hasn't been won yet.\\n    ///  Returns the NFT to original owner.\\n    /// @notice This is a state-modifying function that can\\n    ///  be called while the contract is paused.\\n    /// @param _tokenId - ID of token on auction\\n    function cancelAuction(uint256 _tokenId)\\n        external\\n    {\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n        require(_isOnAuction(auction));\\n        address seller = auction.seller;\\n        require(msg.sender == seller);\\n        _cancelAuction(_tokenId, seller);\\n    }\\n\\n    /// @dev Cancels an auction when the contract is paused.\\n    ///  Only the owner may do this, and NFTs are returned to\\n    ///  the seller. This should only be used in emergencies.\\n    /// @param _tokenId - ID of the NFT on auction to cancel.\\n    function cancelAuctionWhenPaused(uint256 _tokenId)\\n        whenPaused\\n        onlyOwner\\n        external\\n    {\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n        require(_isOnAuction(auction));\\n        _cancelAuction(_tokenId, auction.seller);\\n    }\\n\\n    /// @dev Returns auction info for an NFT on auction.\\n    /// @param _tokenId - ID of NFT on auction.\\n    function getAuction(uint256 _tokenId)\\n        external\\n        view\\n        returns\\n    (\\n        address seller,\\n        uint256 startingPrice,\\n        uint256 endingPrice,\\n        uint256 duration,\\n        uint256 startedAt\\n    ) {\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n        require(_isOnAuction(auction));\\n        return (\\n            auction.seller,\\n            auction.startingPrice,\\n            auction.endingPrice,\\n            auction.duration,\\n            auction.startedAt\\n        );\\n    }\\n\\n    /// @dev Returns the current price of an auction.\\n    /// @param _tokenId - ID of the token price we are checking.\\n    function getCurrentPrice(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n        require(_isOnAuction(auction));\\n        return _currentPrice(auction);\\n    }\\n\\n}\\n\\n\\n/// @title Reverse auction modified for siring\\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\\ncontract SiringClockAuction is ClockAuction {\\n\\n    // @dev Sanity check that allows us to ensure that we are pointing to the\\n    //  right auction in our setSiringAuctionAddress() call.\\n    bool public isSiringClockAuction = true;\\n\\n    // Delegate constructor\\n    function SiringClockAuction(address _nftAddr, uint256 _cut) public\\n        ClockAuction(_nftAddr, _cut) {}\\n\\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\\n    /// require sender to be KittyCore contract.\\n    /// @param _tokenId - ID of token to auction, sender must be owner.\\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\\n    /// @param _duration - Length of auction (in seconds).\\n    /// @param _seller - Seller, if not the message sender\\n    function createAuction(\\n        uint256 _tokenId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration,\\n        address _seller\\n    )\\n        external\\n    {\\n        // Sanity check that no inputs overflow how many bits we've allocated\\n        // to store them in the auction struct.\\n        require(_startingPrice == uint256(uint128(_startingPrice)));\\n        require(_endingPrice == uint256(uint128(_endingPrice)));\\n        require(_duration == uint256(uint64(_duration)));\\n\\n        require(msg.sender == address(nonFungibleContract));\\n        _escrow(_seller, _tokenId);\\n        Auction memory auction = Auction(\\n            _seller,\\n            uint128(_startingPrice),\\n            uint128(_endingPrice),\\n            uint64(_duration),\\n            uint64(now)\\n        );\\n        _addAuction(_tokenId, auction);\\n    }\\n\\n    /// @dev Places a bid for siring. Requires the sender\\n    /// is the KittyCore contract because all bid methods\\n    /// should be wrapped. Also returns the kitty to the\\n    /// seller rather than the winner.\\n    function bid(uint256 _tokenId)\\n        external\\n        payable\\n    {\\n        require(msg.sender == address(nonFungibleContract));\\n        address seller = tokenIdToAuction[_tokenId].seller;\\n        // _bid checks that token ID is valid and will throw if bid fails\\n        _bid(_tokenId, msg.value);\\n        // We transfer the kitty back to the seller, the winner will get\\n        // the offspring\\n        _transfer(seller, _tokenId);\\n    }\\n\\n}\\n\\n\\n\\n\\n\\n/// @title Clock auction modified for sale of kitties\\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\\ncontract SaleClockAuction is ClockAuction {\\n\\n    // @dev Sanity check that allows us to ensure that we are pointing to the\\n    //  right auction in our setSaleAuctionAddress() call.\\n    bool public isSaleClockAuction = true;\\n\\n    // Tracks last 5 sale price of gen0 kitty sales\\n    uint256 public gen0SaleCount;\\n    uint256[5] public lastGen0SalePrices;\\n\\n    // Delegate constructor\\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\\n        ClockAuction(_nftAddr, _cut) {}\\n\\n    /// @dev Creates and begins a new auction.\\n    /// @param _tokenId - ID of token to auction, sender must be owner.\\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\\n    /// @param _duration - Length of auction (in seconds).\\n    /// @param _seller - Seller, if not the message sender\\n    function createAuction(\\n        uint256 _tokenId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration,\\n        address _seller\\n    )\\n        external\\n    {\\n        // Sanity check that no inputs overflow how many bits we've allocated\\n        // to store them in the auction struct.\\n        require(_startingPrice == uint256(uint128(_startingPrice)));\\n        require(_endingPrice == uint256(uint128(_endingPrice)));\\n        require(_duration == uint256(uint64(_duration)));\\n\\n        require(msg.sender == address(nonFungibleContract));\\n        _escrow(_seller, _tokenId);\\n        Auction memory auction = Auction(\\n            _seller,\\n            uint128(_startingPrice),\\n            uint128(_endingPrice),\\n            uint64(_duration),\\n            uint64(now)\\n        );\\n        _addAuction(_tokenId, auction);\\n    }\\n\\n    /// @dev Updates lastSalePrice if seller is the nft contract\\n    /// Otherwise, works the same as default bid method.\\n    function bid(uint256 _tokenId)\\n        external\\n        payable\\n    {\\n        // _bid verifies token ID size\\n        address seller = tokenIdToAuction[_tokenId].seller;\\n        uint256 price = _bid(_tokenId, msg.value);\\n        _transfer(msg.sender, _tokenId);\\n\\n        // If not a gen0 auction, exit\\n        if (seller == address(nonFungibleContract)) {\\n            // Track gen0 sale prices\\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\\n            gen0SaleCount++;\\n        }\\n    }\\n\\n    function averageGen0SalePrice() external view returns (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < 5; i++) {\\n            sum += lastGen0SalePrices[i];\\n        }\\n        return sum / 5;\\n    }\\n\\n}\\n\\n\\n/// @title Handles creating auctions for sale and siring of kitties.\\n///  This wrapper of ReverseAuction exists only so that users can create\\n///  auctions with only one transaction.\\ncontract KittyAuction is KittyBreeding {\\n\\n    // @notice The auction contract variables are defined in KittyBase to allow\\n    //  us to refer to them in KittyOwnership to prevent accidental transfers.\\n    // `saleAuction` refers to the auction for gen0 and p2p sale of kitties.\\n    // `siringAuction` refers to the auction for siring rights of kitties.\\n\\n    /// @dev Sets the reference to the sale auction.\\n    /// @param _address - Address of sale contract.\\n    function setSaleAuctionAddress(address _address) external onlyCEO {\\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\\n\\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\\n        require(candidateContract.isSaleClockAuction());\\n\\n        // Set the new contract address\\n        saleAuction = candidateContract;\\n    }\\n\\n    /// @dev Sets the reference to the siring auction.\\n    /// @param _address - Address of siring contract.\\n    function setSiringAuctionAddress(address _address) external onlyCEO {\\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\\n\\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\\n        require(candidateContract.isSiringClockAuction());\\n\\n        // Set the new contract address\\n        siringAuction = candidateContract;\\n    }\\n\\n    /// @dev Put a kitty up for auction.\\n    ///  Does some ownership trickery to create auctions in one tx.\\n    function createSaleAuction(\\n        uint256 _kittyId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Auction contract checks input sizes\\n        // If kitty is already on any auction, this will throw\\n        // because it will be owned by the auction contract.\\n        require(_owns(msg.sender, _kittyId));\\n        // Ensure the kitty is not pregnant to prevent the auction\\n        // contract accidentally receiving ownership of the child.\\n        // NOTE: the kitty IS allowed to be in a cooldown.\\n        require(!isPregnant(_kittyId));\\n        _approve(_kittyId, saleAuction);\\n        // Sale auction throws if inputs are invalid and clears\\n        // transfer and sire approval after escrowing the kitty.\\n        saleAuction.createAuction(\\n            _kittyId,\\n            _startingPrice,\\n            _endingPrice,\\n            _duration,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @dev Put a kitty up for auction to be sire.\\n    ///  Performs checks to ensure the kitty can be sired, then\\n    ///  delegates to reverse auction.\\n    function createSiringAuction(\\n        uint256 _kittyId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Auction contract checks input sizes\\n        // If kitty is already on any auction, this will throw\\n        // because it will be owned by the auction contract.\\n        require(_owns(msg.sender, _kittyId));\\n        require(isReadyToBreed(_kittyId));\\n        _approve(_kittyId, siringAuction);\\n        // Siring auction throws if inputs are invalid and clears\\n        // transfer and sire approval after escrowing the kitty.\\n        siringAuction.createAuction(\\n            _kittyId,\\n            _startingPrice,\\n            _endingPrice,\\n            _duration,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @dev Completes a siring auction by bidding.\\n    ///  Immediately breeds the winning matron with the sire on auction.\\n    /// @param _sireId - ID of the sire on auction.\\n    /// @param _matronId - ID of the matron owned by the bidder.\\n    function bidOnSiringAuction(\\n        uint256 _sireId,\\n        uint256 _matronId\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        // Auction contract checks input sizes\\n        require(_owns(msg.sender, _matronId));\\n        require(isReadyToBreed(_matronId));\\n        require(_canBreedWithViaAuction(_matronId, _sireId));\\n\\n        // Define the current price of the auction.\\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\\n        require(msg.value >= currentPrice + autoBirthFee);\\n\\n        // Siring auction will throw if the bid fails.\\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\\n        _breedWith(uint32(_matronId), uint32(_sireId));\\n    }\\n\\n    /// @dev Transfers the balance of the sale auction contract\\n    /// to the KittyCore contract. We use two-step withdrawal to\\n    /// prevent two transfer calls in the auction bid function.\\n    function withdrawAuctionBalances() external onlyCLevel {\\n        saleAuction.withdrawBalance();\\n        siringAuction.withdrawBalance();\\n    }\\n}\\n\\n\\n/// @title all functions related to creating kittens\\ncontract KittyMinting is KittyAuction {\\n\\n    // Limits the number of cats the contract owner can ever create.\\n    uint256 public constant PROMO_CREATION_LIMIT = 5000;\\n    uint256 public constant GEN0_CREATION_LIMIT = 45000;\\n\\n    // Constants for gen0 auctions.\\n    uint256 public constant GEN0_STARTING_PRICE = 10 finney;\\n    uint256 public constant GEN0_AUCTION_DURATION = 1 days;\\n\\n    // Counts the number of cats the contract owner has created.\\n    uint256 public promoCreatedCount;\\n    uint256 public gen0CreatedCount;\\n\\n    /// @dev we can create promo kittens, up to a limit. Only callable by COO\\n    /// @param _genes the encoded genes of the kitten to be created, any value is accepted\\n    /// @param _owner the future owner of the created kittens. Default to contract COO\\n    function createPromoKitty(uint256 _genes, address _owner) external onlyCOO {\\n        address kittyOwner = _owner;\\n        if (kittyOwner == address(0)) {\\n             kittyOwner = cooAddress;\\n        }\\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\\n\\n        promoCreatedCount++;\\n        _createKitty(0, 0, 0, _genes, kittyOwner);\\n    }\\n\\n    /// @dev Creates a new gen0 kitty with the given genes and\\n    ///  creates an auction for it.\\n    function createGen0Auction(uint256 _genes) external onlyCOO {\\n        require(gen0CreatedCount < GEN0_CREATION_LIMIT);\\n\\n        uint256 kittyId = _createKitty(0, 0, 0, _genes, address(this));\\n        _approve(kittyId, saleAuction);\\n\\n        saleAuction.createAuction(\\n            kittyId,\\n            _computeNextGen0Price(),\\n            0,\\n            GEN0_AUCTION_DURATION,\\n            address(this)\\n        );\\n\\n        gen0CreatedCount++;\\n    }\\n\\n    /// @dev Computes the next gen0 auction starting price, given\\n    ///  the average of the past 5 prices + 50%.\\n    function _computeNextGen0Price() internal view returns (uint256) {\\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\\n\\n        // Sanity check to ensure we don't overflow arithmetic\\n        require(avePrice == uint256(uint128(avePrice)));\\n\\n        uint256 nextPrice = avePrice + (avePrice / 2);\\n\\n        // We never auction for less than starting price\\n        if (nextPrice < GEN0_STARTING_PRICE) {\\n            nextPrice = GEN0_STARTING_PRICE;\\n        }\\n\\n        return nextPrice;\\n    }\\n}\\n\\n\\n/// @title CryptoKitties: Collectible, breedable, and oh-so-adorable cats on the Ethereum blockchain.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev The main CryptoKitties contract, keeps track of kittens so they don't wander around and get lost.\\ncontract KittyCore is KittyMinting {\\n\\n    // This is the main CryptoKitties contract. In order to keep our code seperated into logical sections,\\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\\n    // kitty ownership. The genetic combination algorithm is kept seperate so we can open-source all of\\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\\n    //\\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\\n    //\\n    //      - KittyBase: This is where we define the most fundamental code shared throughout the core\\n    //             functionality. This includes our main data storage, constants and data types, plus\\n    //             internal functions for managing these items.\\n    //\\n    //      - KittyAccessControl: This contract manages the various addresses and constraints for operations\\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\\n    //\\n    //      - KittyOwnership: This provides the methods required for basic non-fungible token\\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\\n    //\\n    //      - KittyBreeding: This file contains the methods necessary to breed cats together, including\\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\\n    //\\n    //      - KittyAuctions: Here we have the public methods for auctioning or bidding on cats or siring\\n    //             services. The actual auction functionality is handled in two sibling contracts (one\\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\\n    //             through this facet of the core contract.\\n    //\\n    //      - KittyMinting: This final facet contains the functionality we use for creating new gen0 cats.\\n    //             We can make up to 5000 \\\"promo\\\" cats that can be given away (especially important when\\n    //             the community is new), and all others can only be created and then immediately put up\\n    //             for auction via an algorithmically determined starting price. Regardless of how they\\n    //             are created, there is a hard limit of 50k gen0 cats. After that, it's all up to the\\n    //             community to breed, breed, breed!\\n\\n    // Set in case the core contract is broken and an upgrade is required\\n    address public newContractAddress;\\n\\n    /// @notice Creates the main CryptoKitties smart contract instance.\\n    function KittyCore() public {\\n        // Starts paused.\\n        paused = true;\\n\\n        // the creator of the contract is the initial CEO\\n        ceoAddress = msg.sender;\\n\\n        // the creator of the contract is also the initial COO\\n        cooAddress = msg.sender;\\n\\n        // start with the mythical kitten 0 - so we don't have generation-0 parent issues\\n        _createKitty(0, 0, 0, uint256(-1), address(0));\\n    }\\n\\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\\n    ///  breaking bug. This method does nothing but keep track of the new contract and\\n    ///  emit a message indicating that the new address is set. It's up to clients of this\\n    ///  contract to update to the new contract address in that case. (This contract will\\n    ///  be paused indefinitely if such an upgrade takes place.)\\n    /// @param _v2Address new address\\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\\n        // See README.md for updgrade plan\\n        newContractAddress = _v2Address;\\n        ContractUpgrade(_v2Address);\\n    }\\n\\n    /// @notice No tipping!\\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\\n    function() external payable {\\n        require(\\n            msg.sender == address(saleAuction) ||\\n            msg.sender == address(siringAuction)\\n        );\\n    }\\n\\n    /// @notice Returns all the relevant information about a specific kitty.\\n    /// @param _id The ID of the kitty of interest.\\n    function getKitty(uint256 _id)\\n        external\\n        view\\n        returns (\\n        bool isGestating,\\n        bool isReady,\\n        uint256 cooldownIndex,\\n        uint256 nextActionAt,\\n        uint256 siringWithId,\\n        uint256 birthTime,\\n        uint256 matronId,\\n        uint256 sireId,\\n        uint256 generation,\\n        uint256 genes\\n    ) {\\n        Kitty storage kit = kitties[_id];\\n\\n        // if this variable is 0 then it's not gestating\\n        isGestating = (kit.siringWithId != 0);\\n        isReady = (kit.cooldownEndBlock <= block.number);\\n        cooldownIndex = uint256(kit.cooldownIndex);\\n        nextActionAt = uint256(kit.cooldownEndBlock);\\n        siringWithId = uint256(kit.siringWithId);\\n        birthTime = uint256(kit.birthTime);\\n        matronId = uint256(kit.matronId);\\n        sireId = uint256(kit.sireId);\\n        generation = uint256(kit.generation);\\n        genes = kit.genes;\\n    }\\n\\n    /// @dev Override unpause so it requires all external contract addresses\\n    ///  to be set before contract can be unpaused. Also, we can't have\\n    ///  newContractAddress set either, because then the contract was upgraded.\\n    /// @notice This is public rather than external so we can call super.unpause\\n    ///  without using an expensive CALL.\\n    function unpause() public onlyCEO whenPaused {\\n        require(saleAuction != address(0));\\n        require(siringAuction != address(0));\\n        require(geneScience != address(0));\\n        require(newContractAddress == address(0));\\n\\n        // Actually unpause the contract.\\n        super.unpause();\\n    }\\n\\n    // @dev Allows the CFO to capture the balance available to the contract.\\n    function withdrawBalance() external onlyCFO {\\n        uint256 balance = this.balance;\\n        // Subtract all the currently pregnant kittens we have, plus 1 of margin.\\n        uint256 subtractFees = (pregnantKitties + 1) * autoBirthFee;\\n\\n        if (balance > subtractFees) {\\n            cfoAddress.send(balance - subtractFees);\\n        }\\n    }\\n}\\n\"}}"
          },
          "cookies": [
            {
              "expires": "2019-07-26T20:28:53.000Z",
              "name": "AWSALB",
              "path": "/",
              "value": "bU2bDCFnhCXSNrNhj2xh3jD3oQdQ8Gt6E5qpOVeVzqlG3xtKzpPMBO8hX1LolNuIOQKl/lErSbwTlpQZnbloD8BNBLjxsii85IXLwrx9bo4X/pRNshGtxucCKJYc"
            }
          ],
          "headers": [
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "122309"
            },
            {
              "name": "connection",
              "value": "close"
            },
            {
              "name": "date",
              "value": "Fri, 19 Jul 2019 20:28:53 GMT"
            },
            {
              "name": "x-amzn-requestid",
              "value": "d31e67b9-aa63-11e9-aed2-1fd65f42b8e5"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "x-response-time",
              "value": "60.766ms"
            },
            {
              "name": "x-amzn-remapped-content-length",
              "value": "122309"
            },
            {
              "name": "x-amzn-remapped-connection",
              "value": "keep-alive"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "AWSALB=bU2bDCFnhCXSNrNhj2xh3jD3oQdQ8Gt6E5qpOVeVzqlG3xtKzpPMBO8hX1LolNuIOQKl/lErSbwTlpQZnbloD8BNBLjxsii85IXLwrx9bo4X/pRNshGtxucCKJYc; Expires=Fri, 26 Jul 2019 20:28:53 GMT; Path=/"
            },
            {
              "name": "x-amz-apigw-id",
              "value": "dFswzHIcIAMF6bQ="
            },
            {
              "name": "etag",
              "value": "W/\"1ddc5-zXv74SiYEe4XR9rNdZhBFuICYnw\""
            },
            {
              "name": "x-amzn-remapped-date",
              "value": "Fri, 19 Jul 2019 20:28:53 GMT"
            },
            {
              "name": "x-cache",
              "value": "Miss from cloudfront"
            },
            {
              "name": "via",
              "value": "1.1 26c88c0e916228dda5c9471d3f86bfda.cloudfront.net (CloudFront)"
            },
            {
              "name": "x-amz-cf-pop",
              "value": "SEA19"
            },
            {
              "name": "x-amz-cf-id",
              "value": "2WiKaNbZhtwk4pUPbiD5Yx_dOuEm6ZCrcbDc4DnKRjJLhmtypYPvaA=="
            }
          ],
          "headersSize": 842,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2019-07-19T20:28:52.800Z",
        "time": 727,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 727
        }
      },
      {
        "_id": "95064c089338125e2e346b0e46a9d69d",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "x-api-key",
              "value": "API_KEY"
            },
            {
              "name": "user-agent",
              "value": "axios/0.19.0"
            },
            {
              "name": "host",
              "value": "web3api.io"
            }
          ],
          "headersSize": 240,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [],
          "url": "https://web3api.io/api/v1/contracts/0x06012c8cf97bead5deae237070f9587f8e7a266d/functions"
        },
        "response": {
          "bodySize": 75,
          "content": {
            "mimeType": "application/json; charset=utf-8",
            "size": 75,
            "text": "{\"status\":200,\"title\":\"OK\",\"description\":\"Successful request\",\"payload\":{}}"
          },
          "cookies": [
            {
              "expires": "2019-07-26T20:28:53.000Z",
              "name": "AWSALB",
              "path": "/",
              "value": "BbyNkbhKpBrAvyOCg+Hl3w164vP8DA/Xua0urEbInu46KYZePDB5cgSx0SpZi/1rTbet7qALL9OX4WCHbP3RNpdjfhHVuakUlBlJ+Z4rzfw8ut2iPBjq/yVzaXnz"
            }
          ],
          "headers": [
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "75"
            },
            {
              "name": "connection",
              "value": "close"
            },
            {
              "name": "date",
              "value": "Fri, 19 Jul 2019 20:28:53 GMT"
            },
            {
              "name": "x-amzn-requestid",
              "value": "d30a431b-aa63-11e9-ba57-c5660296ed7c"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "x-response-time",
              "value": "571.262ms"
            },
            {
              "name": "x-amzn-remapped-content-length",
              "value": "75"
            },
            {
              "name": "x-amzn-remapped-connection",
              "value": "keep-alive"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "AWSALB=BbyNkbhKpBrAvyOCg+Hl3w164vP8DA/Xua0urEbInu46KYZePDB5cgSx0SpZi/1rTbet7qALL9OX4WCHbP3RNpdjfhHVuakUlBlJ+Z4rzfw8ut2iPBjq/yVzaXnz; Expires=Fri, 26 Jul 2019 20:28:53 GMT; Path=/"
            },
            {
              "name": "x-amz-apigw-id",
              "value": "dFswyGoFoAMFS2A="
            },
            {
              "name": "etag",
              "value": "W/\"4b-CF6cAMu50AuzLonS1lkcvIeHGCE\""
            },
            {
              "name": "x-amzn-remapped-date",
              "value": "Fri, 19 Jul 2019 20:28:53 GMT"
            },
            {
              "name": "x-cache",
              "value": "Miss from cloudfront"
            },
            {
              "name": "via",
              "value": "1.1 e7a6b3b39a146e70091418a22590a905.cloudfront.net (CloudFront)"
            },
            {
              "name": "x-amz-cf-pop",
              "value": "SEA19"
            },
            {
              "name": "x-amz-cf-id",
              "value": "wWjKfebWSnkLrpp_Q5yv6odu478kCtU18F-0B97gtxKCEwUfW1dgjg=="
            }
          ],
          "headersSize": 832,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2019-07-19T20:28:52.800Z",
        "time": 945,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 945
        }
      },
      {
        "_id": "8e119ebdf3c65727c620d527e29e4f6f",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "x-api-key",
              "value": "API_KEY"
            },
            {
              "name": "user-agent",
              "value": "axios/0.19.0"
            },
            {
              "name": "host",
              "value": "web3api.io"
            }
          ],
          "headersSize": 234,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [],
          "url": "https://web3api.io/api/v1/contracts/0x06012c8cf97bead5deae237070f9587f8e7a266d/abi"
        },
        "response": {
          "bodySize": 75,
          "content": {
            "mimeType": "application/json; charset=utf-8",
            "size": 75,
            "text": "{\"status\":200,\"title\":\"OK\",\"description\":\"Successful request\",\"payload\":{}}"
          },
          "cookies": [
            {
              "expires": "2019-07-26T20:28:53.000Z",
              "name": "AWSALB",
              "path": "/",
              "value": "DQpeGHtQRuVvJd5pskOwvDcPJ+xQfheHdYzrdAiLr3n9v2pBO9fpKYadiNp7+mDe+oKAIVVTFH6yuAmb7fow6FTve4FYoXyn6rizHX3TyfBH13krfqtLSytovTk6"
            }
          ],
          "headers": [
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "75"
            },
            {
              "name": "connection",
              "value": "close"
            },
            {
              "name": "date",
              "value": "Fri, 19 Jul 2019 20:28:53 GMT"
            },
            {
              "name": "x-amzn-requestid",
              "value": "d31edcbc-aa63-11e9-aba7-efc38668b199"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "x-response-time",
              "value": "595.666ms"
            },
            {
              "name": "x-amzn-remapped-content-length",
              "value": "75"
            },
            {
              "name": "x-amzn-remapped-connection",
              "value": "keep-alive"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "AWSALB=DQpeGHtQRuVvJd5pskOwvDcPJ+xQfheHdYzrdAiLr3n9v2pBO9fpKYadiNp7+mDe+oKAIVVTFH6yuAmb7fow6FTve4FYoXyn6rizHX3TyfBH13krfqtLSytovTk6; Expires=Fri, 26 Jul 2019 20:28:53 GMT; Path=/"
            },
            {
              "name": "x-amz-apigw-id",
              "value": "dFsw0EYSIAMF3DA="
            },
            {
              "name": "etag",
              "value": "W/\"4b-CF6cAMu50AuzLonS1lkcvIeHGCE\""
            },
            {
              "name": "x-amzn-remapped-date",
              "value": "Fri, 19 Jul 2019 20:28:53 GMT"
            },
            {
              "name": "x-cache",
              "value": "Miss from cloudfront"
            },
            {
              "name": "via",
              "value": "1.1 4c4ed81695980f3c6829b9fd229bd0f8.cloudfront.net (CloudFront)"
            },
            {
              "name": "x-amz-cf-pop",
              "value": "SEA19"
            },
            {
              "name": "x-amz-cf-id",
              "value": "7a9xEbJEDylRLd-Sn_cqGQ7to6Jke6IVgO-GEjiMcp3CAytkIf2oRQ=="
            }
          ],
          "headersSize": 832,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2019-07-19T20:28:52.800Z",
        "time": 1070,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 1070
        }
      },
      {
        "_id": "6f92f3a630eb101a554295b99bbe8ad7",
        "_order": 1,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "x-api-key",
              "value": "API_KEY"
            },
            {
              "name": "user-agent",
              "value": "axios/0.19.0"
            },
            {
              "name": "host",
              "value": "web3api.io"
            }
          ],
          "headersSize": 230,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [],
          "url": "https://web3api.io/api/v1/contracts/0x06012c8cf97bead5deae237070f9587f8e7a266d"
        },
        "response": {
          "bodySize": 122309,
          "content": {
            "mimeType": "application/json; charset=utf-8",
            "size": 122309,
            "text": "{\"status\":200,\"title\":\"OK\",\"description\":\"Successful request\",\"payload\":{\"bytecode\":\"0x606060409081526002805460a060020a60ff02191690556101c090519081016040908152603c82526078602083015261012c9082015261025860608201526107086080820152610e1060a0820152611c2060c082015261384060e082015261708061010082015261e100610120820152620151806101408201526202a3006101608201526205460061018082015262093a806101a0820152620000a790600390600e620004e4565b50600f60055566071afd498d0000600e553415620000c457600080fd5b6002805460008054600160a060020a033316600160a060020a03199182168117835560a060020a60ff02199093167401000000000000000000000000000000000000000017169091179091556200012f90808060001981640100000000620028f06200013682021704565b5062000649565b6000806200014362000587565b600063ffffffff891689146200015857600080fd5b63ffffffff881688146200016b57600080fd5b61ffff871687146200017c57600080fd5b600287049250600d8361ffff1611156200019557600d92505b61010060405190810160409081528782526001604060020a0342166020830152600090820181905263ffffffff808c1660608401528a16608083015260a082015261ffff80851660c0830152881660e082015260068054919350600191808301620002018382620005cb565b6000928352602090922085916002020181518155602082015160018201805467ffffffffffffffff19166001604060020a039290921691909117905560408201518160010160086101000a8154816001604060020a0302191690836001604060020a0316021790555060608201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060c082015181600101601c6101000a81548161ffff021916908361ffff16021790555060e08201516001909101805461ffff929092167e0100000000000000000000000000000000000000000000000000000000000002600160f060020a039092169190911790555003905063ffffffff811681146200035e57600080fd5b7f0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad58582846060015163ffffffff16856080015163ffffffff168651604051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a1620003ef60008683640100000000620025e0620003fb82021704565b98975050505050505050565b600160a060020a03808316600081815260086020908152604080832080546001019055858352600790915290208054600160a060020a03191690911790558316156200048f57600160a060020a03831660009081526008602090815260408083208054600019019055838352600a82528083208054600160a060020a03199081169091556009909252909120805490911690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b600283019183908215620005755791602002820160005b838211156200054157835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620004fb565b8015620005735782816101000a81549063ffffffff021916905560040160208160030104928301926001030262000541565b505b5062000583929150620005ff565b5090565b6101006040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082015290565b815481835581811511620005fa57600202816002028360005260206000209182019101620005fa919062000626565b505050565b6200062391905b808211156200058357805463ffffffff1916815560010162000606565b90565b6200062391905b808211156200058357600080825560018201556002016200062d565b61309380620006596000396000f3006060604052600436106102a55763ffffffff60e060020a60003504166301ffc9a781146102dd5780630519ce79146103295780630560ff441461035857806305e45546146103f157806306fdde0314610416578063095ea7b3146104295780630a0f81681461044b5780630e583df01461045e57806314001f4c1461047157806318160ddd14610490578063183a7947146104a35780631940a936146104b657806319c2f201146104cc57806321717ebf146104df57806323b872dd146104f257806324e7a38a1461051a57806327d7874c146105395780632ba73c15146105585780633d7d3f5a146105775780633f4ba83a1461059657806346116e6f146105a957806346d22c70146105bf578063481af3d3146105d85780634ad8c938146105ee5780634b85fd551461060d5780634dfff04f146106235780634e0a33791461064557806356129134146106645780635663896e146106865780635c975abb1461069c5780635fd8c710146106af5780636352211e146106c2578063680eba27146106d85780636af04a57146106eb5780636fbde40d146106fe57806370a082311461071d578063715879881461073c5780637a7d49371461075b5780638456cb591461076e5780638462151c1461078157806388c2a0bf146107f357806391876e571461080957806395d89b411461081c5780639d6fac6f1461082f578063a45f4bfc1461085e578063a9059cbb14610874578063b047fb5014610896578063b0c35c05146108a9578063bc4006f5146108bc578063c3bea9af146108cf578063d3e6f49f146108e5578063defb9584146108fb578063e17b25af1461090e578063e6cbe3511461092d578063e98b7f4d14610940578063ed60ade6146109ae578063f1ca9410146109bc578063f2b47d52146109cf578063f7d8c883146109e2575b600b5433600160a060020a03908116911614806102d05750600c5433600160a060020a039081169116145b15156102db57600080fd5b005b34156102e857600080fd5b6103157fffffffff00000000000000000000000000000000000000000000000000000000600435166109f0565b604051901515815260200160405180910390f35b341561033457600080fd5b61033c610c77565b604051600160a060020a03909116815260200160405180910390f35b341561036357600080fd5b61037a600480359060248035908101910135610c86565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103b657808201518382015260200161039e565b50505050905090810190601f1680156103e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103fc57600080fd5b610404610d63565b60405190815260200160405180910390f35b341561042157600080fd5b61037a610d69565b341561043457600080fd5b6102db600160a060020a0360043516602435610da0565b341561045657600080fd5b61033c610e2a565b341561046957600080fd5b610404610e39565b341561047c57600080fd5b6102db600160a060020a0360043516610e44565b341561049b57600080fd5b610404610ef1565b34156104ae57600080fd5b610404610efc565b34156104c157600080fd5b610315600435610f02565b34156104d757600080fd5b610404610f47565b34156104ea57600080fd5b61033c610f4e565b34156104fd57600080fd5b6102db600160a060020a0360043581169060243516604435610f5d565b341561052557600080fd5b6102db600160a060020a0360043516610fe4565b341561054457600080fd5b6102db600160a060020a0360043516611091565b341561056357600080fd5b6102db600160a060020a03600435166110e3565b341561058257600080fd5b6102db600435602435604435606435611135565b34156105a157600080fd5b6102db611214565b34156105b457600080fd5b61033c6004356112ac565b34156105ca57600080fd5b6103156004356024356112c7565b34156105e357600080fd5b61033c600435611347565b34156105f957600080fd5b6102db600435602435604435606435611362565b341561061857600080fd5b6102db600435611428565b341561062e57600080fd5b6102db600160a060020a0360043516602435611448565b341561065057600080fd5b6102db600160a060020a03600435166114a2565b341561066f57600080fd5b6102db600435600160a060020a03602435166114f4565b341561069157600080fd5b6102db600435611560565b34156106a757600080fd5b6103156115c8565b34156106ba57600080fd5b6102db6115d8565b34156106cd57600080fd5b61033c600435611649565b34156106e357600080fd5b61040461166d565b34156106f657600080fd5b61033c611673565b341561070957600080fd5b6102db600160a060020a0360043516611682565b341561072857600080fd5b610404600160a060020a036004351661172f565b341561074757600080fd5b6102db600160a060020a036004351661174a565b341561076657600080fd5b6104046117d8565b341561077957600080fd5b6102db6117de565b341561078c57600080fd5b6107a0600160a060020a036004351661186a565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156107df5780820151838201526020016107c7565b505050509050019250505060405180910390f35b34156107fe57600080fd5b61040460043561194b565b341561081457600080fd5b6102db611c1b565b341561082757600080fd5b61037a611d0e565b341561083a57600080fd5b610845600435611d45565b60405163ffffffff909116815260200160405180910390f35b341561086957600080fd5b61033c600435611d72565b341561087f57600080fd5b6102db600160a060020a0360043516602435611d8d565b34156108a157600080fd5b61033c611e30565b34156108b457600080fd5b610404611e3f565b34156108c757600080fd5b61033c611e45565b34156108da57600080fd5b6102db600435611e54565b34156108f057600080fd5b610315600435611f47565b341561090657600080fd5b610404612010565b341561091957600080fd5b6102db600160a060020a0360043516612016565b341561093857600080fd5b61033c612053565b341561094b57600080fd5b610956600435612062565b6040519915158a5297151560208a01526040808a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152610120830191909152610140909101905180910390f35b6102db6004356024356121c3565b34156109c757600080fd5b610404612316565b34156109da57600080fd5b61033c61231c565b6102db60043560243561232b565b60006040517f737570706f727473496e7465726661636528627974657334290000000000000081526019016040518091039020600160e060020a03191682600160e060020a0319161480610c6f57506040517f746f6b656e4d657461646174612875696e743235362c737472696e67290000008152601d0160405180910390206040517f746f6b656e734f664f776e657228616464726573732900000000000000000000815260160160405180910390206040517f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81527f7432353629000000000000000000000000000000000000000000000000000000602082015260250160405180910390206040517f7472616e7366657228616464726573732c75696e743235362900000000000000815260190160405180910390206040517f617070726f766528616464726573732c75696e74323536290000000000000000815260180160405180910390206040517f6f776e65724f662875696e743235362900000000000000000000000000000000815260100160405180910390206040517f62616c616e63654f662861646472657373290000000000000000000000000000815260120160405180910390206040517f746f74616c537570706c792829000000000000000000000000000000000000008152600d0160405180910390206040517f73796d626f6c2829000000000000000000000000000000000000000000000000815260080160405180910390206040517f6e616d652829000000000000000000000000000000000000000000000000000081526006016040518091039020181818181818181818600160e060020a03191682600160e060020a031916145b90505b919050565b600154600160a060020a031681565b610c8e612fa0565b610c96612fb2565b600d54600090600160a060020a03161515610cb057600080fd5b600d54600160a060020a031663cb4799f2878787600060405160a0015260405160e060020a63ffffffff861602815260048101848152604060248301908152604483018490529091606401848480828437820191505094505050505060a060405180830381600087803b1515610d2557600080fd5b6102c65a03f11515610d3657600080fd5b50505060405180608001805160209091016040529092509050610d59828261251d565b9695505050505050565b60115481565b60408051908101604052600d81527f43727970746f4b69747469657300000000000000000000000000000000000000602082015281565b60025460a060020a900460ff1615610db757600080fd5b610dc13382612572565b1515610dcc57600080fd5b610dd68183612592565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a15050565b600054600160a060020a031681565b662386f26fc1000081565b6000805433600160a060020a03908116911614610e6057600080fd5b5080600160a060020a0381166376190f8f6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ea857600080fd5b6102c65a03f11515610eb957600080fd5b505050604051805190501515610ece57600080fd5b600c8054600160a060020a031916600160a060020a039290921691909117905550565b600654600019015b90565b600f5481565b6000808211610f1057600080fd5b6006805483908110610f1e57fe5b600091825260209091206002909102016001015460c060020a900463ffffffff16151592915050565b6201518081565b600c54600160a060020a031681565b60025460a060020a900460ff1615610f7457600080fd5b600160a060020a0382161515610f8957600080fd5b30600160a060020a031682600160a060020a031614151515610faa57600080fd5b610fb433826125c0565b1515610fbf57600080fd5b610fc98382612572565b1515610fd457600080fd5b610fdf8383836125e0565b505050565b6000805433600160a060020a0390811691161461100057600080fd5b5080600160a060020a0381166354c15b826000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561104857600080fd5b6102c65a03f1151561105957600080fd5b50505060405180519050151561106e57600080fd5b60108054600160a060020a031916600160a060020a039290921691909117905550565b60005433600160a060020a039081169116146110ac57600080fd5b600160a060020a03811615156110c157600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146110fe57600080fd5b600160a060020a038116151561111357600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60025460a060020a900460ff161561114c57600080fd5b6111563385612572565b151561116157600080fd5b61116a84610f02565b1561117457600080fd5b600b5461118b908590600160a060020a0316612592565b600b54600160a060020a03166327ebe40a858585853360405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b15156111fa57600080fd5b6102c65a03f1151561120b57600080fd5b50505050505050565b60005433600160a060020a0390811691161461122f57600080fd5b60025460a060020a900460ff16151561124757600080fd5b600b54600160a060020a0316151561125e57600080fd5b600c54600160a060020a0316151561127557600080fd5b601054600160a060020a0316151561128c57600080fd5b601354600160a060020a0316156112a257600080fd5b6112aa6126c8565b565b600a60205260009081526040902054600160a060020a031681565b600080808085116112d757600080fd5b600084116112e457600080fd5b60068054869081106112f257fe5b9060005260206000209060020201915060068481548110151561131157fe5b9060005260206000209060020201905061132d8286838761271b565b801561133e575061133e848661289b565b95945050505050565b600960205260009081526040902054600160a060020a031681565b60025460a060020a900460ff161561137957600080fd5b6113833385612572565b151561138e57600080fd5b61139784611f47565b15156113a257600080fd5b600c546113b9908590600160a060020a0316612592565b600c54600160a060020a03166327ebe40a858585853360405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b15156111fa57600080fd5b60025433600160a060020a0390811691161461144357600080fd5b600e55565b60025460a060020a900460ff161561145f57600080fd5b6114693382612572565b151561147457600080fd5b6000908152600a602052604090208054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146114bd57600080fd5b600160a060020a03811615156114d257600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60025460009033600160a060020a0390811691161461151257600080fd5b5080600160a060020a03811615156115325750600254600160a060020a03165b601154611388901061154357600080fd5b60118054600101905561155a6000808086856128f0565b50505050565b60025433600160a060020a039081169116148061158b575060005433600160a060020a039081169116145b806115a4575060015433600160a060020a039081169116145b15156115af57600080fd5b60035463ffffffff1681106115c357600080fd5b600555565b60025460a060020a900460ff1681565b600154600090819033600160a060020a039081169116146115f857600080fd5b30600160a060020a0316319150600e54600f546001010290508082111561164557600154600160a060020a031681830380156108fc0290604051600060405180830381858888f150505050505b5050565b600081815260076020526040902054600160a060020a0316801515610c7257600080fd5b61afc881565b601354600160a060020a031681565b6000805433600160a060020a0390811691161461169e57600080fd5b5080600160a060020a0381166385b861886000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156116e657600080fd5b6102c65a03f115156116f757600080fd5b50505060405180519050151561170c57600080fd5b600b8054600160a060020a031916600160a060020a039290921691909117905550565b600160a060020a031660009081526008602052604090205490565b60005433600160a060020a0390811691161461176557600080fd5b60025460a060020a900460ff16151561177d57600080fd5b60138054600160a060020a031916600160a060020a0383161790557f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa44619930581604051600160a060020a03909116815260200160405180910390a150565b60055481565b60025433600160a060020a0390811691161480611809575060005433600160a060020a039081169116145b80611822575060015433600160a060020a039081169116145b151561182d57600080fd5b60025460a060020a900460ff161561184457600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b611872612fa0565b600061187c612fa0565b600080600061188a8761172f565b94508415156118ba5760006040518059106118a25750595b90808252806020026020018201604052509550611941565b846040518059106118c85750595b908082528060200260200182016040525093506118e3610ef1565b925060009150600190505b82811161193d57600081815260076020526040902054600160a060020a0388811691161415611935578084838151811061192457fe5b602090810290910101526001909101905b6001016118ee565b8395505b5050505050919050565b600080600080600080600080600260149054906101000a900460ff1615151561197357600080fd5b600680548a90811061198157fe5b60009182526020909120600290910201600181015490975067ffffffffffffffff1615156119ae57600080fd5b611a438761010060405190810160409081528254825260019092015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152612b9c565b1515611a4e57600080fd5b60018701546006805460c060020a90920463ffffffff1697509087908110611a7257fe5b600091825260209091206001808a015460029093029091019081015490965061ffff60f060020a92839004811696509190041684901115611ac057600185015460f060020a900461ffff1693505b6010548754865460018a0154600160a060020a0390931692630d9f5aed92919068010000000000000000900467ffffffffffffffff166000190160006040516020015260405160e060020a63ffffffff86160281526004810193909352602483019190915267ffffffffffffffff166044820152606401602060405180830381600087803b1515611b5057600080fd5b6102c65a03f11515611b6157600080fd5b505050604051805160008b81526007602052604090205460018a810154929650600160a060020a039091169450611bb092508b9160c060020a900463ffffffff1690870161ffff1686866128f0565b6001880180547bffffffff00000000000000000000000000000000000000000000000019169055600f8054600019019055600e54909150600160a060020a0333169080156108fc0290604051600060405180830381858888f150939c9b505050505050505050505050565b60025433600160a060020a0390811691161480611c46575060005433600160a060020a039081169116145b80611c5f575060015433600160a060020a039081169116145b1515611c6a57600080fd5b600b54600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515611ca957600080fd5b6102c65a03f11515611cba57600080fd5b5050600c54600160a060020a03169050635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515611cfd57600080fd5b6102c65a03f11515610fdf57600080fd5b60408051908101604052600281527f434b000000000000000000000000000000000000000000000000000000000000602082015281565b600381600e8110611d5257fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b600760205260009081526040902054600160a060020a031681565b60025460a060020a900460ff1615611da457600080fd5b600160a060020a0382161515611db957600080fd5b30600160a060020a031682600160a060020a031614151515611dda57600080fd5b600b54600160a060020a0383811691161415611df557600080fd5b600c54600160a060020a0383811691161415611e1057600080fd5b611e1a3382612572565b1515611e2557600080fd5b6116453383836125e0565b600254600160a060020a031681565b600e5481565b600d54600160a060020a031681565b60025460009033600160a060020a03908116911614611e7257600080fd5b60125461afc89010611e8357600080fd5b611e92600080600085306128f0565b600b54909150611eac908290600160a060020a0316612592565b600b54600160a060020a03166327ebe40a82611ec6612bd4565b6000620151803060405160e060020a63ffffffff88160281526004810195909552602485019390935260448401919091526064830152600160a060020a0316608482015260a401600060405180830381600087803b1515611f2657600080fd5b6102c65a03f11515611f3757600080fd5b5050601280546001019055505050565b600080808311611f5657600080fd5b6006805484908110611f6457fe5b906000526020600020906002020190506120098161010060405190810160409081528254825260019092015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152612c82565b9392505050565b61138881565b60005433600160a060020a0390811691161461203157600080fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b600b54600160a060020a031681565b600080600080600080600080600080600060068c81548110151561208257fe5b906000526020600020906002020190508060010160189054906101000a900463ffffffff1663ffffffff16600014159a50438160010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115995080600101601c9054906101000a900461ffff1661ffff1698508060010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1697508060010160189054906101000a900463ffffffff1663ffffffff1696508060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1695508060010160109054906101000a900463ffffffff1663ffffffff1694508060010160149054906101000a900463ffffffff1663ffffffff16935080600101601e9054906101000a900461ffff1661ffff16925080600001549150509193959799509193959799565b60025460009060a060020a900460ff16156121dd57600080fd5b6121e73383612572565b15156121f257600080fd5b6121fb82611f47565b151561220657600080fd5b6122108284612cb9565b151561221b57600080fd5b600c54600160a060020a031663c55d0f568460006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561226c57600080fd5b6102c65a03f1151561227d57600080fd5b5050506040518051600e549092508201341015905061229b57600080fd5b600c54600e54600160a060020a039091169063454a2ab39034038560405160e060020a63ffffffff851602815260048101919091526024016000604051808303818588803b15156122eb57600080fd5b6125ee5a03f115156122fc57600080fd5b50505050610fdf8263ffffffff168463ffffffff16612d08565b60125481565b601054600160a060020a031681565b600254600090819060a060020a900460ff161561234757600080fd5b600e5434101561235657600080fd5b6123603385612572565b151561236b57600080fd5b612375838561289b565b151561238057600080fd5b600680548590811061238e57fe5b906000526020600020906002020191506124338261010060405190810160409081528254825260019092015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152612c82565b151561243e57600080fd5b600680548490811061244c57fe5b906000526020600020906002020190506124f18161010060405190810160409081528254825260019092015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152612c82565b15156124fc57600080fd5b6125088285838661271b565b151561251357600080fd5b61155a8484612d08565b612525612fa0565b61252d612fa0565b6000808460405180591061253e5750595b818152601f19601f8301168101602001604052905092505060208201905084612568828287612e72565b5090949350505050565b600090815260076020526040902054600160a060020a0391821691161490565b6000918252600960205260409091208054600160a060020a031916600160a060020a03909216919091179055565b600090815260096020526040902054600160a060020a0391821691161490565b600160a060020a03808316600081815260086020908152604080832080546001019055858352600790915290208054600160a060020a031916909117905583161561267357600160a060020a03831660009081526008602090815260408083208054600019019055838352600a82528083208054600160a060020a03199081169091556009909252909120805490911690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b60005433600160a060020a039081169116146126e357600080fd5b60025460a060020a900460ff1615156126fb57600080fd5b6002805474ff000000000000000000000000000000000000000019169055565b60008184141561272d57506000612893565b6001850154608060020a900463ffffffff1682148061275c5750600185015460a060020a900463ffffffff1682145b1561276957506000612893565b6001830154608060020a900463ffffffff168414806127985750600183015460a060020a900463ffffffff1684145b156127a557506000612893565b6001830154608060020a900463ffffffff1615806127d257506001850154608060020a900463ffffffff16155b156127df57506001612893565b60018581015490840154608060020a9182900463ffffffff9081169290910416148061282a575060018086015490840154608060020a900463ffffffff90811660a060020a90920416145b1561283757506000612893565b6001808601549084015460a060020a900463ffffffff908116608060020a90920416148061288257506001858101549084015460a060020a9182900463ffffffff9081169290910416145b1561288f57506000612893565b5060015b949350505050565b6000818152600760205260408082205484835290822054600160a060020a0391821691168082148061133e57506000858152600a6020526040902054600160a060020a03908116908316149250505092915050565b6000806128fb612fdb565b600063ffffffff8916891461290f57600080fd5b63ffffffff8816881461292157600080fd5b61ffff8716871461293157600080fd5b600287049250600d8361ffff16111561294957600d92505b610100604051908101604090815287825267ffffffffffffffff42166020830152600090820181905263ffffffff808c1660608401528a16608083015260a082015261ffff80851660c0830152881660e0820152600680549193506001918083016129b4838261301f565b6000928352602090922085916002020181518155602082015160018201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060c082015181600101601c6101000a81548161ffff021916908361ffff16021790555060e08201516001909101805461ffff9290921660f060020a027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911790555003905063ffffffff81168114612b0f57600080fd5b7f0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad58582846060015163ffffffff16856080015163ffffffff168651604051600160a060020a03909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390a1612b90600086836125e0565b98975050505050505050565b60008160a0015163ffffffff1615801590610c6f57504367ffffffffffffffff16826040015167ffffffffffffffff16111592915050565b600b5460009081908190600160a060020a031663eac9d94c82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612c2257600080fd5b6102c65a03f11515612c3357600080fd5b50505060405180519250506fffffffffffffffffffffffffffffffff82168214612c5c57600080fd5b50600281048101662386f26fc10000811015612c7c5750662386f26fc100005b92915050565b60008160a0015163ffffffff16158015610c6f57504367ffffffffffffffff16826040015167ffffffffffffffff16111592915050565b6000806000600685815481101515612ccd57fe5b90600052602060002090600202019150600684815481101515612cec57fe5b9060005260206000209060020201905061133e8286838761271b565b600080600683815481101515612d1a57fe5b90600052602060002090600202019150600684815481101515612d3957fe5b600091825260209091206002909102016001810180547bffffffff000000000000000000000000000000000000000000000000191660c060020a63ffffffff8716021790559050612d8982612eb7565b612d9281612eb7565b6000848152600a602090815260408083208054600160a060020a031990811690915586845281842080549091169055600f8054600190810190915587845260079092529182902054908301547f241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b8092600160a060020a0390921691879187916801000000000000000090910467ffffffffffffffff1690518085600160a060020a0316600160a060020a031681526020018481526020018381526020018267ffffffffffffffff16815260200194505050505060405180910390a150505050565b60005b60208210612e985782518452602084019350602083019250602082039150612e75565b6001826020036101000a03905080198351168185511617909352505050565b600554600182015443919060039060e060020a900461ffff16600e8110612eda57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff16811515612f0557fe5b6001840180546fffffffffffffffff0000000000000000191668010000000000000000939092049390930167ffffffffffffffff16919091021790819055600d60e060020a90910461ffff161015612f9d576001818101805461ffff60e060020a8083048216909401169092027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911790555b50565b60206040519081016040526000815290565b60806040519081016040526004815b60008152600019919091019060200181612fc15790505090565b6101006040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082015290565b815481835581811511610fdf57600083815260209020610fdf91610ef99160029182028101918502015b808211156130635760008082556001820155600201613049565b50905600a165627a7a72305820a6465fc1ce7ab1a92906ff7206b23d80a21bbd50b85b4bde6a91f8e6b2e3edde0029\",\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pregnantKitties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"isPregnant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sireAllowedToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kittyIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"approveSiring\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"giveBirth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kittyIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getKitty\",\"outputs\":[{\"name\":\"isGestating\",\"type\":\"bool\"},{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"siringWithId\",\"type\":\"uint256\"},{\"name\":\"birthTime\",\"type\":\"uint256\"},{\"name\":\"matronId\",\"type\":\"uint256\"},{\"name\":\"sireId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cooldownEndBlock\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kittyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}],\"contractName\":\"CryptoKitties\",\"source\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  function Ownable() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner {\\n    if (newOwner != address(0)) {\\n      owner = newOwner;\\n    }\\n  }\\n\\n}\\n\\n\\n\\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\\n/// @author Dieter Shirley <[email protected]> (https://github.com/dete)\\ncontract ERC721 {\\n    // Required methods\\n    function totalSupply() public view returns (uint256 total);\\n    function balanceOf(address _owner) public view returns (uint256 balance);\\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\\n    function approve(address _to, uint256 _tokenId) external;\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    // Events\\n    event Transfer(address from, address to, uint256 tokenId);\\n    event Approval(address owner, address approved, uint256 tokenId);\\n\\n    // Optional\\n    // function name() public view returns (string name);\\n    // function symbol() public view returns (string symbol);\\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\\n\\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\\n}\\n\\n\\n// // Auction wrapper functions\\n\\n\\n// Auction wrapper functions\\n\\n\\n\\n\\n\\n\\n\\n/// @title SEKRETOOOO\\ncontract GeneScienceInterface {\\n    /// @dev simply a boolean to indicate this is the contract we expect to be\\n    function isGeneScience() public pure returns (bool);\\n\\n    /// @dev given genes of kitten 1 & 2, return a genetic combination - may have a random factor\\n    /// @param genes1 genes of mom\\n    /// @param genes2 genes of sire\\n    /// @return the genes that are supposed to be passed down the child\\n    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);\\n}\\n\\n\\n\\n\\n\\n\\n\\n/// @title A facet of KittyCore that manages special access privileges.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev See the KittyCore contract documentation to understand how the various contract facets are arranged.\\ncontract KittyAccessControl {\\n    // This facet controls access control for CryptoKitties. There are four roles managed here:\\n    //\\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\\n    //         set to the address that created the smart contract in the KittyCore constructor.\\n    //\\n    //     - The CFO: The CFO can withdraw funds from KittyCore and its auction contracts.\\n    //\\n    //     - The COO: The COO can release gen0 kitties to auction, and mint promo cats.\\n    //\\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\\n    // account.\\n\\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\\n    event ContractUpgrade(address newContract);\\n\\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\\n    address public ceoAddress;\\n    address public cfoAddress;\\n    address public cooAddress;\\n\\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\\n    bool public paused = false;\\n\\n    /// @dev Access modifier for CEO-only functionality\\n    modifier onlyCEO() {\\n        require(msg.sender == ceoAddress);\\n        _;\\n    }\\n\\n    /// @dev Access modifier for CFO-only functionality\\n    modifier onlyCFO() {\\n        require(msg.sender == cfoAddress);\\n        _;\\n    }\\n\\n    /// @dev Access modifier for COO-only functionality\\n    modifier onlyCOO() {\\n        require(msg.sender == cooAddress);\\n        _;\\n    }\\n\\n    modifier onlyCLevel() {\\n        require(\\n            msg.sender == cooAddress ||\\n            msg.sender == ceoAddress ||\\n            msg.sender == cfoAddress\\n        );\\n        _;\\n    }\\n\\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\\n    /// @param _newCEO The address of the new CEO\\n    function setCEO(address _newCEO) external onlyCEO {\\n        require(_newCEO != address(0));\\n\\n        ceoAddress = _newCEO;\\n    }\\n\\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\\n    /// @param _newCFO The address of the new CFO\\n    function setCFO(address _newCFO) external onlyCEO {\\n        require(_newCFO != address(0));\\n\\n        cfoAddress = _newCFO;\\n    }\\n\\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\\n    /// @param _newCOO The address of the new COO\\n    function setCOO(address _newCOO) external onlyCEO {\\n        require(_newCOO != address(0));\\n\\n        cooAddress = _newCOO;\\n    }\\n\\n    /*** Pausable functionality adapted from OpenZeppelin ***/\\n\\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /// @dev Modifier to allow actions only when the contract IS paused\\n    modifier whenPaused {\\n        require(paused);\\n        _;\\n    }\\n\\n    /// @dev Called by any \\\"C-level\\\" role to pause the contract. Used only when\\n    ///  a bug or exploit is detected and we need to limit damage.\\n    function pause() external onlyCLevel whenNotPaused {\\n        paused = true;\\n    }\\n\\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\\n    ///  one reason we may pause the contract is when CFO or COO accounts are\\n    ///  compromised.\\n    /// @notice This is public rather than external so it can be called by\\n    ///  derived contracts.\\n    function unpause() public onlyCEO whenPaused {\\n        // can't unpause if contract was upgraded\\n        paused = false;\\n    }\\n}\\n\\n\\n\\n\\n/// @title Base contract for CryptoKitties. Holds all common structs, events and base variables.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev See the KittyCore contract documentation to understand how the various contract facets are arranged.\\ncontract KittyBase is KittyAccessControl {\\n    /*** EVENTS ***/\\n\\n    /// @dev The Birth event is fired whenever a new kitten comes into existence. This obviously\\n    ///  includes any time a cat is created through the giveBirth method, but it is also called\\n    ///  when a new gen0 cat is created.\\n    event Birth(address owner, uint256 kittyId, uint256 matronId, uint256 sireId, uint256 genes);\\n\\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a kitten\\n    ///  ownership is assigned, including births.\\n    event Transfer(address from, address to, uint256 tokenId);\\n\\n    /*** DATA TYPES ***/\\n\\n    /// @dev The main Kitty struct. Every cat in CryptoKitties is represented by a copy\\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\\n    ///  is important because of the byte-packing rules used by Ethereum.\\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\\n    struct Kitty {\\n        // The Kitty's genetic code is packed into these 256-bits, the format is\\n        // sooper-sekret! A cat's genes never change.\\n        uint256 genes;\\n\\n        // The timestamp from the block when this cat came into existence.\\n        uint64 birthTime;\\n\\n        // The minimum timestamp after which this cat can engage in breeding\\n        // activities again. This same timestamp is used for the pregnancy\\n        // timer (for matrons) as well as the siring cooldown.\\n        uint64 cooldownEndBlock;\\n\\n        // The ID of the parents of this kitty, set to 0 for gen0 cats.\\n        // Note that using 32-bit unsigned integers limits us to a \\\"mere\\\"\\n        // 4 billion cats. This number might seem small until you realize\\n        // that Ethereum currently has a limit of about 500 million\\n        // transactions per year! So, this definitely won't be a problem\\n        // for several years (even as Ethereum learns to scale).\\n        uint32 matronId;\\n        uint32 sireId;\\n\\n        // Set to the ID of the sire cat for matrons that are pregnant,\\n        // zero otherwise. A non-zero value here is how we know a cat\\n        // is pregnant. Used to retrieve the genetic material for the new\\n        // kitten when the birth transpires.\\n        uint32 siringWithId;\\n\\n        // Set to the index in the cooldown array (see below) that represents\\n        // the current cooldown duration for this Kitty. This starts at zero\\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\\n        // Incremented by one for each successful breeding action, regardless\\n        // of whether this cat is acting as matron or sire.\\n        uint16 cooldownIndex;\\n\\n        // The \\\"generation number\\\" of this cat. Cats minted by the CK contract\\n        // for sale are called \\\"gen0\\\" and have a generation number of 0. The\\n        // generation number of all other cats is the larger of the two generation\\n        // numbers of their parents, plus one.\\n        // (i.e. max(matron.generation, sire.generation) + 1)\\n        uint16 generation;\\n    }\\n\\n    /*** CONSTANTS ***/\\n\\n    /// @dev A lookup table indicating the cooldown duration after any successful\\n    ///  breeding action, called \\\"pregnancy time\\\" for matrons and \\\"siring cooldown\\\"\\n    ///  for sires. Designed such that the cooldown roughly doubles each time a cat\\n    ///  is bred, encouraging owners not to just keep breeding the same cat over\\n    ///  and over again. Caps out at one week (a cat can breed an unbounded number\\n    ///  of times, and the maximum cooldown is always seven days).\\n    uint32[14] public cooldowns = [\\n        uint32(1 minutes),\\n        uint32(2 minutes),\\n        uint32(5 minutes),\\n        uint32(10 minutes),\\n        uint32(30 minutes),\\n        uint32(1 hours),\\n        uint32(2 hours),\\n        uint32(4 hours),\\n        uint32(8 hours),\\n        uint32(16 hours),\\n        uint32(1 days),\\n        uint32(2 days),\\n        uint32(4 days),\\n        uint32(7 days)\\n    ];\\n\\n    // An approximation of currently how many seconds are in between blocks.\\n    uint256 public secondsPerBlock = 15;\\n\\n    /*** STORAGE ***/\\n\\n    /// @dev An array containing the Kitty struct for all Kitties in existence. The ID\\n    ///  of each cat is actually an index into this array. Note that ID 0 is a negacat,\\n    ///  the unKitty, the mythical beast that is the parent of all gen0 cats. A bizarre\\n    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\\n    ///  In other words, cat ID 0 is invalid... ;-)\\n    Kitty[] kitties;\\n\\n    /// @dev A mapping from cat IDs to the address that owns them. All cats have\\n    ///  some valid owner address, even gen0 cats are created with a non-zero owner.\\n    mapping (uint256 => address) public kittyIndexToOwner;\\n\\n    // @dev A mapping from owner address to count of tokens that address owns.\\n    //  Used internally inside balanceOf() to resolve ownership count.\\n    mapping (address => uint256) ownershipTokenCount;\\n\\n    /// @dev A mapping from KittyIDs to an address that has been approved to call\\n    ///  transferFrom(). Each Kitty can only have one approved address for transfer\\n    ///  at any time. A zero value means no approval is outstanding.\\n    mapping (uint256 => address) public kittyIndexToApproved;\\n\\n    /// @dev A mapping from KittyIDs to an address that has been approved to use\\n    ///  this Kitty for siring via breedWith(). Each Kitty can only have one approved\\n    ///  address for siring at any time. A zero value means no approval is outstanding.\\n    mapping (uint256 => address) public sireAllowedToAddress;\\n\\n    /// @dev The address of the ClockAuction contract that handles sales of Kitties. This\\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\\n    ///  initiated every 15 minutes.\\n    SaleClockAuction public saleAuction;\\n\\n    /// @dev The address of a custom ClockAuction subclassed contract that handles siring\\n    ///  auctions. Needs to be separate from saleAuction because the actions taken on success\\n    ///  after a sales and siring auction are quite different.\\n    SiringClockAuction public siringAuction;\\n\\n    /// @dev Assigns ownership of a specific Kitty to an address.\\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\\n        // Since the number of kittens is capped to 2^32 we can't overflow this\\n        ownershipTokenCount[_to]++;\\n        // transfer ownership\\n        kittyIndexToOwner[_tokenId] = _to;\\n        // When creating new kittens _from is 0x0, but we can't account that address.\\n        if (_from != address(0)) {\\n            ownershipTokenCount[_from]--;\\n            // once the kitten is transferred also clear sire allowances\\n            delete sireAllowedToAddress[_tokenId];\\n            // clear any previously approved ownership exchange\\n            delete kittyIndexToApproved[_tokenId];\\n        }\\n        // Emit the transfer event.\\n        Transfer(_from, _to, _tokenId);\\n    }\\n\\n    /// @dev An internal method that creates a new kitty and stores it. This\\n    ///  method doesn't do any checking and should only be called when the\\n    ///  input data is known to be valid. Will generate both a Birth event\\n    ///  and a Transfer event.\\n    /// @param _matronId The kitty ID of the matron of this cat (zero for gen0)\\n    /// @param _sireId The kitty ID of the sire of this cat (zero for gen0)\\n    /// @param _generation The generation number of this cat, must be computed by caller.\\n    /// @param _genes The kitty's genetic code.\\n    /// @param _owner The inital owner of this cat, must be non-zero (except for the unKitty, ID 0)\\n    function _createKitty(\\n        uint256 _matronId,\\n        uint256 _sireId,\\n        uint256 _generation,\\n        uint256 _genes,\\n        address _owner\\n    )\\n        internal\\n        returns (uint)\\n    {\\n        // These requires are not strictly necessary, our calling code should make\\n        // sure that these conditions are never broken. However! _createKitty() is already\\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\\n        // to ensure our data structures are always valid.\\n        require(_matronId == uint256(uint32(_matronId)));\\n        require(_sireId == uint256(uint32(_sireId)));\\n        require(_generation == uint256(uint16(_generation)));\\n\\n        // New kitty starts with the same cooldown as parent gen/2\\n        uint16 cooldownIndex = uint16(_generation / 2);\\n        if (cooldownIndex > 13) {\\n            cooldownIndex = 13;\\n        }\\n\\n        Kitty memory _kitty = Kitty({\\n            genes: _genes,\\n            birthTime: uint64(now),\\n            cooldownEndBlock: 0,\\n            matronId: uint32(_matronId),\\n            sireId: uint32(_sireId),\\n            siringWithId: 0,\\n            cooldownIndex: cooldownIndex,\\n            generation: uint16(_generation)\\n        });\\n        uint256 newKittenId = kitties.push(_kitty) - 1;\\n\\n        // It's probably never going to happen, 4 billion cats is A LOT, but\\n        // let's just be 100% sure we never let this happen.\\n        require(newKittenId == uint256(uint32(newKittenId)));\\n\\n        // emit the birth event\\n        Birth(\\n            _owner,\\n            newKittenId,\\n            uint256(_kitty.matronId),\\n            uint256(_kitty.sireId),\\n            _kitty.genes\\n        );\\n\\n        // This will assign ownership, and also emit the Transfer event as\\n        // per ERC721 draft\\n        _transfer(0, _owner, newKittenId);\\n\\n        return newKittenId;\\n    }\\n\\n    // Any C-level can fix how many seconds per blocks are currently observed.\\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\\n        require(secs < cooldowns[0]);\\n        secondsPerBlock = secs;\\n    }\\n}\\n\\n\\n\\n\\n\\n/// @title The external contract that is responsible for generating metadata for the kitties,\\n///  it has one function that will return the data as bytes.\\ncontract ERC721Metadata {\\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\\n    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\\n        if (_tokenId == 1) {\\n            buffer[0] = \\\"Hello World! :D\\\";\\n            count = 15;\\n        } else if (_tokenId == 2) {\\n            buffer[0] = \\\"I would definitely choose a medi\\\";\\n            buffer[1] = \\\"um length string.\\\";\\n            count = 49;\\n        } else if (_tokenId == 3) {\\n            buffer[0] = \\\"Lorem ipsum dolor sit amet, mi e\\\";\\n            buffer[1] = \\\"st accumsan dapibus augue lorem,\\\";\\n            buffer[2] = \\\" tristique vestibulum id, libero\\\";\\n            buffer[3] = \\\" suscipit varius sapien aliquam.\\\";\\n            count = 128;\\n        }\\n    }\\n}\\n\\n\\n/// @title The facet of the CryptoKitties core contract that manages ownership, ERC-721 (draft) compliant.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\\n///  See the KittyCore contract documentation to understand how the various contract facets are arranged.\\ncontract KittyOwnership is KittyBase, ERC721 {\\n\\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\\n    string public constant name = \\\"CryptoKitties\\\";\\n    string public constant symbol = \\\"CK\\\";\\n\\n    // The contract that will return kitty metadata\\n    ERC721Metadata public erc721Metadata;\\n\\n    bytes4 constant InterfaceSignature_ERC165 =\\n        bytes4(keccak256('supportsInterface(bytes4)'));\\n\\n    bytes4 constant InterfaceSignature_ERC721 =\\n        bytes4(keccak256('name()')) ^\\n        bytes4(keccak256('symbol()')) ^\\n        bytes4(keccak256('totalSupply()')) ^\\n        bytes4(keccak256('balanceOf(address)')) ^\\n        bytes4(keccak256('ownerOf(uint256)')) ^\\n        bytes4(keccak256('approve(address,uint256)')) ^\\n        bytes4(keccak256('transfer(address,uint256)')) ^\\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\\n        bytes4(keccak256('tokensOfOwner(address)')) ^\\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\\n\\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\\n    ///  ERC-165 (obviously!) and ERC-721.\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\\n    {\\n        // DEBUG ONLY\\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\\n\\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\\n    }\\n\\n    /// @dev Set the address of the sibling contract that tracks metadata.\\n    ///  CEO only.\\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\\n        erc721Metadata = ERC721Metadata(_contractAddress);\\n    }\\n\\n    // Internal utility functions: These functions all assume that their input arguments\\n    // are valid. We leave it to public methods to sanitize their inputs and follow\\n    // the required logic.\\n\\n    /// @dev Checks if a given address is the current owner of a particular Kitty.\\n    /// @param _claimant the address we are validating against.\\n    /// @param _tokenId kitten id, only valid when > 0\\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\\n        return kittyIndexToOwner[_tokenId] == _claimant;\\n    }\\n\\n    /// @dev Checks if a given address currently has transferApproval for a particular Kitty.\\n    /// @param _claimant the address we are confirming kitten is approved for.\\n    /// @param _tokenId kitten id, only valid when > 0\\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\\n        return kittyIndexToApproved[_tokenId] == _claimant;\\n    }\\n\\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\\n    ///  _approve() and transferFrom() are used together for putting Kitties on auction, and\\n    ///  there is no value in spamming the log with Approval events in that case.\\n    function _approve(uint256 _tokenId, address _approved) internal {\\n        kittyIndexToApproved[_tokenId] = _approved;\\n    }\\n\\n    /// @notice Returns the number of Kitties owned by a specific address.\\n    /// @param _owner The owner address to check.\\n    /// @dev Required for ERC-721 compliance\\n    function balanceOf(address _owner) public view returns (uint256 count) {\\n        return ownershipTokenCount[_owner];\\n    }\\n\\n    /// @notice Transfers a Kitty to another address. If transferring to a smart\\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\\n    ///  CryptoKitties specifically) or your Kitty may be lost forever. Seriously.\\n    /// @param _to The address of the recipient, can be a user or contract.\\n    /// @param _tokenId The ID of the Kitty to transfer.\\n    /// @dev Required for ERC-721 compliance.\\n    function transfer(\\n        address _to,\\n        uint256 _tokenId\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Safety check to prevent against an unexpected 0x0 default.\\n        require(_to != address(0));\\n        // Disallow transfers to this contract to prevent accidental misuse.\\n        // The contract should never own any kitties (except very briefly\\n        // after a gen0 cat is created and before it goes on auction).\\n        require(_to != address(this));\\n        // Disallow transfers to the auction contracts to prevent accidental\\n        // misuse. Auction contracts should only take ownership of kitties\\n        // through the allow + transferFrom flow.\\n        require(_to != address(saleAuction));\\n        require(_to != address(siringAuction));\\n\\n        // You can only send your own cat.\\n        require(_owns(msg.sender, _tokenId));\\n\\n        // Reassign ownership, clear pending approvals, emit Transfer event.\\n        _transfer(msg.sender, _to, _tokenId);\\n    }\\n\\n    /// @notice Grant another address the right to transfer a specific Kitty via\\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\\n    ///  clear all approvals.\\n    /// @param _tokenId The ID of the Kitty that can be transferred if this call succeeds.\\n    /// @dev Required for ERC-721 compliance.\\n    function approve(\\n        address _to,\\n        uint256 _tokenId\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Only an owner can grant transfer approval.\\n        require(_owns(msg.sender, _tokenId));\\n\\n        // Register the approval (replacing any previous approval).\\n        _approve(_tokenId, _to);\\n\\n        // Emit approval event.\\n        Approval(msg.sender, _to, _tokenId);\\n    }\\n\\n    /// @notice Transfer a Kitty owned by another address, for which the calling address\\n    ///  has previously been granted transfer approval by the owner.\\n    /// @param _from The address that owns the Kitty to be transfered.\\n    /// @param _to The address that should take ownership of the Kitty. Can be any address,\\n    ///  including the caller.\\n    /// @param _tokenId The ID of the Kitty to be transferred.\\n    /// @dev Required for ERC-721 compliance.\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Safety check to prevent against an unexpected 0x0 default.\\n        require(_to != address(0));\\n        // Disallow transfers to this contract to prevent accidental misuse.\\n        // The contract should never own any kitties (except very briefly\\n        // after a gen0 cat is created and before it goes on auction).\\n        require(_to != address(this));\\n        // Check for approval and valid ownership\\n        require(_approvedFor(msg.sender, _tokenId));\\n        require(_owns(_from, _tokenId));\\n\\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    /// @notice Returns the total number of Kitties currently in existence.\\n    /// @dev Required for ERC-721 compliance.\\n    function totalSupply() public view returns (uint) {\\n        return kitties.length - 1;\\n    }\\n\\n    /// @notice Returns the address currently assigned ownership of a given Kitty.\\n    /// @dev Required for ERC-721 compliance.\\n    function ownerOf(uint256 _tokenId)\\n        external\\n        view\\n        returns (address owner)\\n    {\\n        owner = kittyIndexToOwner[_tokenId];\\n\\n        require(owner != address(0));\\n    }\\n\\n    /// @notice Returns a list of all Kitty IDs assigned to an address.\\n    /// @param _owner The owner whose Kitties we are interested in.\\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\\n    ///  expensive (it walks the entire Kitty array looking for cats belonging to owner),\\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\\n    ///  not contract-to-contract calls.\\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\\n        uint256 tokenCount = balanceOf(_owner);\\n\\n        if (tokenCount == 0) {\\n            // Return an empty array\\n            return new uint256[](0);\\n        } else {\\n            uint256[] memory result = new uint256[](tokenCount);\\n            uint256 totalCats = totalSupply();\\n            uint256 resultIndex = 0;\\n\\n            // We count on the fact that all cats have IDs starting at 1 and increasing\\n            // sequentially up to the totalCat count.\\n            uint256 catId;\\n\\n            for (catId = 1; catId <= totalCats; catId++) {\\n                if (kittyIndexToOwner[catId] == _owner) {\\n                    result[resultIndex] = catId;\\n                    resultIndex++;\\n                }\\n            }\\n\\n            return result;\\n        }\\n    }\\n\\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <[email protected]>)\\n    ///  This method is licenced under the Apache License.\\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\\n        // Copy word-length chunks while possible\\n        for(; _len >= 32; _len -= 32) {\\n            assembly {\\n                mstore(_dest, mload(_src))\\n            }\\n            _dest += 32;\\n            _src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint256 mask = 256 ** (32 - _len) - 1;\\n        assembly {\\n            let srcpart := and(mload(_src), not(mask))\\n            let destpart := and(mload(_dest), mask)\\n            mstore(_dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <[email protected]>)\\n    ///  This method is licenced under the Apache License.\\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\\n        var outputString = new string(_stringLength);\\n        uint256 outputPtr;\\n        uint256 bytesPtr;\\n\\n        assembly {\\n            outputPtr := add(outputString, 32)\\n            bytesPtr := _rawBytes\\n        }\\n\\n        _memcpy(outputPtr, bytesPtr, _stringLength);\\n\\n        return outputString;\\n    }\\n\\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\\n    /// @param _tokenId The ID number of the Kitty whose metadata should be returned.\\n    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\\n        require(erc721Metadata != address(0));\\n        bytes32[4] memory buffer;\\n        uint256 count;\\n        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\\n\\n        return _toString(buffer, count);\\n    }\\n}\\n\\n\\n\\n/// @title A facet of KittyCore that manages Kitty siring, gestation, and birth.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev See the KittyCore contract documentation to understand how the various contract facets are arranged.\\ncontract KittyBreeding is KittyOwnership {\\n\\n    /// @dev The Pregnant event is fired when two cats successfully breed and the pregnancy\\n    ///  timer begins for the matron.\\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\\n\\n    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards\\n    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by\\n    ///  the COO role as the gas price changes.\\n    uint256 public autoBirthFee = 2 finney;\\n\\n    // Keeps track of number of pregnant kitties.\\n    uint256 public pregnantKitties;\\n\\n    /// @dev The address of the sibling contract that is used to implement the sooper-sekret\\n    ///  genetic combination algorithm.\\n    GeneScienceInterface public geneScience;\\n\\n    /// @dev Update the address of the genetic contract, can only be called by the CEO.\\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\\n    function setGeneScienceAddress(address _address) external onlyCEO {\\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\\n\\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\\n        require(candidateContract.isGeneScience());\\n\\n        // Set the new contract address\\n        geneScience = candidateContract;\\n    }\\n\\n    /// @dev Checks that a given kitten is able to breed. Requires that the\\n    ///  current cooldown is finished (for sires) and also checks that there is\\n    ///  no pending pregnancy.\\n    function _isReadyToBreed(Kitty _kit) internal view returns (bool) {\\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\\n        // the cat has a pending birth; there can be some period of time between the end\\n        // of the pregnacy timer and the birth event.\\n        return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\\n    }\\n\\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\\n    ///  and matron have the same owner, or if the sire has given siring permission to\\n    ///  the matron's owner (via approveSiring()).\\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\\n        address matronOwner = kittyIndexToOwner[_matronId];\\n        address sireOwner = kittyIndexToOwner[_sireId];\\n\\n        // Siring is okay if they have same owner, or if the matron's owner was given\\n        // permission to breed with this sire.\\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\\n    }\\n\\n    /// @dev Set the cooldownEndTime for the given Kitty, based on its current cooldownIndex.\\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\\n    /// @param _kitten A reference to the Kitty in storage which needs its timer started.\\n    function _triggerCooldown(Kitty storage _kitten) internal {\\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\\n        _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex]/secondsPerBlock) + block.number);\\n\\n        // Increment the breeding count, clamping it at 13, which is the length of the\\n        // cooldowns array. We could check the array size dynamically, but hard-coding\\n        // this as a constant saves gas. Yay, Solidity!\\n        if (_kitten.cooldownIndex < 13) {\\n            _kitten.cooldownIndex += 1;\\n        }\\n    }\\n\\n    /// @notice Grants approval to another user to sire with one of your Kitties.\\n    /// @param _addr The address that will be able to sire with your Kitty. Set to\\n    ///  address(0) to clear all siring approvals for this Kitty.\\n    /// @param _sireId A Kitty that you own that _addr will now be able to sire with.\\n    function approveSiring(address _addr, uint256 _sireId)\\n        external\\n        whenNotPaused\\n    {\\n        require(_owns(msg.sender, _sireId));\\n        sireAllowedToAddress[_sireId] = _addr;\\n    }\\n\\n    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only\\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\\n    ///  by the autobirth daemon).\\n    function setAutoBirthFee(uint256 val) external onlyCOO {\\n        autoBirthFee = val;\\n    }\\n\\n    /// @dev Checks to see if a given Kitty is pregnant and (if so) if the gestation\\n    ///  period has passed.\\n    function _isReadyToGiveBirth(Kitty _matron) private view returns (bool) {\\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\\n    }\\n\\n    /// @notice Checks that a given kitten is able to breed (i.e. it is not pregnant or\\n    ///  in the middle of a siring cooldown).\\n    /// @param _kittyId reference the id of the kitten, any user can inquire about it\\n    function isReadyToBreed(uint256 _kittyId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(_kittyId > 0);\\n        Kitty storage kit = kitties[_kittyId];\\n        return _isReadyToBreed(kit);\\n    }\\n\\n    /// @dev Checks whether a kitty is currently pregnant.\\n    /// @param _kittyId reference the id of the kitten, any user can inquire about it\\n    function isPregnant(uint256 _kittyId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(_kittyId > 0);\\n        // A kitty is pregnant if and only if this field is set\\n        return kitties[_kittyId].siringWithId != 0;\\n    }\\n\\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT\\n    ///  check ownership permissions (that is up to the caller).\\n    /// @param _matron A reference to the Kitty struct of the potential matron.\\n    /// @param _matronId The matron's ID.\\n    /// @param _sire A reference to the Kitty struct of the potential sire.\\n    /// @param _sireId The sire's ID\\n    function _isValidMatingPair(\\n        Kitty storage _matron,\\n        uint256 _matronId,\\n        Kitty storage _sire,\\n        uint256 _sireId\\n    )\\n        private\\n        view\\n        returns(bool)\\n    {\\n        // A Kitty can't breed with itself!\\n        if (_matronId == _sireId) {\\n            return false;\\n        }\\n\\n        // Kitties can't breed with their parents.\\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\\n            return false;\\n        }\\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\\n            return false;\\n        }\\n\\n        // We can short circuit the sibling check (below) if either cat is\\n        // gen zero (has a matron ID of zero).\\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\\n            return true;\\n        }\\n\\n        // Kitties can't breed with full or half siblings.\\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\\n            return false;\\n        }\\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\\n            return false;\\n        }\\n\\n        // Everything seems cool! Let's get DTF.\\n        return true;\\n    }\\n\\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\\n    ///  breeding via auction (i.e. skips ownership and siring approval checks).\\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Kitty storage matron = kitties[_matronId];\\n        Kitty storage sire = kitties[_sireId];\\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\\n    }\\n\\n    /// @notice Checks to see if two cats can breed together, including checks for\\n    ///  ownership and siring approvals. Does NOT check that both cats are ready for\\n    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).\\n    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?\\n    /// @param _matronId The ID of the proposed matron.\\n    /// @param _sireId The ID of the proposed sire.\\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\\n        external\\n        view\\n        returns(bool)\\n    {\\n        require(_matronId > 0);\\n        require(_sireId > 0);\\n        Kitty storage matron = kitties[_matronId];\\n        Kitty storage sire = kitties[_sireId];\\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\\n            _isSiringPermitted(_sireId, _matronId);\\n    }\\n\\n    /// @dev Internal utility function to initiate breeding, assumes that all breeding\\n    ///  requirements have been checked.\\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\\n        // Grab a reference to the Kitties from storage.\\n        Kitty storage sire = kitties[_sireId];\\n        Kitty storage matron = kitties[_matronId];\\n\\n        // Mark the matron as pregnant, keeping track of who the sire is.\\n        matron.siringWithId = uint32(_sireId);\\n\\n        // Trigger the cooldown for both parents.\\n        _triggerCooldown(sire);\\n        _triggerCooldown(matron);\\n\\n        // Clear siring permission for both parents. This may not be strictly necessary\\n        // but it's likely to avoid confusion!\\n        delete sireAllowedToAddress[_matronId];\\n        delete sireAllowedToAddress[_sireId];\\n\\n        // Every time a kitty gets pregnant, counter is incremented.\\n        pregnantKitties++;\\n\\n        // Emit the pregnancy event.\\n        Pregnant(kittyIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\\n    }\\n\\n    /// @notice Breed a Kitty you own (as matron) with a sire that you own, or for which you\\n    ///  have previously been given Siring approval. Will either make your cat pregnant, or will\\n    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()\\n    /// @param _matronId The ID of the Kitty acting as matron (will end up pregnant if successful)\\n    /// @param _sireId The ID of the Kitty acting as sire (will begin its siring cooldown if successful)\\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        // Checks for payment.\\n        require(msg.value >= autoBirthFee);\\n\\n        // Caller must own the matron.\\n        require(_owns(msg.sender, _matronId));\\n\\n        // Neither sire nor matron are allowed to be on auction during a normal\\n        // breeding operation, but we don't need to check that explicitly.\\n        // For matron: The caller of this function can't be the owner of the matron\\n        //   because the owner of a Kitty on auction is the auction house, and the\\n        //   auction house will never call breedWith().\\n        // For sire: Similarly, a sire on auction will be owned by the auction house\\n        //   and the act of transferring ownership will have cleared any oustanding\\n        //   siring approval.\\n        // Thus we don't need to spend gas explicitly checking to see if either cat\\n        // is on auction.\\n\\n        // Check that matron and sire are both owned by caller, or that the sire\\n        // has given siring permission to caller (i.e. matron's owner).\\n        // Will fail for _sireId = 0\\n        require(_isSiringPermitted(_sireId, _matronId));\\n\\n        // Grab a reference to the potential matron\\n        Kitty storage matron = kitties[_matronId];\\n\\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\\n        require(_isReadyToBreed(matron));\\n\\n        // Grab a reference to the potential sire\\n        Kitty storage sire = kitties[_sireId];\\n\\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\\n        require(_isReadyToBreed(sire));\\n\\n        // Test that these cats are a valid mating pair.\\n        require(_isValidMatingPair(\\n            matron,\\n            _matronId,\\n            sire,\\n            _sireId\\n        ));\\n\\n        // All checks passed, kitty gets pregnant!\\n        _breedWith(_matronId, _sireId);\\n    }\\n\\n    /// @notice Have a pregnant Kitty give birth!\\n    /// @param _matronId A Kitty ready to give birth.\\n    /// @return The Kitty ID of the new kitten.\\n    /// @dev Looks at a given Kitty and, if pregnant and if the gestation period has passed,\\n    ///  combines the genes of the two parents to create a new kitten. The new Kitty is assigned\\n    ///  to the current owner of the matron. Upon successful completion, both the matron and the\\n    ///  new kitten will be ready to breed again. Note that anyone can call this function (if they\\n    ///  are willing to pay the gas!), but the new kitten always goes to the mother's owner.\\n    function giveBirth(uint256 _matronId)\\n        external\\n        whenNotPaused\\n        returns(uint256)\\n    {\\n        // Grab a reference to the matron in storage.\\n        Kitty storage matron = kitties[_matronId];\\n\\n        // Check that the matron is a valid cat.\\n        require(matron.birthTime != 0);\\n\\n        // Check that the matron is pregnant, and that its time has come!\\n        require(_isReadyToGiveBirth(matron));\\n\\n        // Grab a reference to the sire in storage.\\n        uint256 sireId = matron.siringWithId;\\n        Kitty storage sire = kitties[sireId];\\n\\n        // Determine the higher generation number of the two parents\\n        uint16 parentGen = matron.generation;\\n        if (sire.generation > matron.generation) {\\n            parentGen = sire.generation;\\n        }\\n\\n        // Call the sooper-sekret gene mixing operation.\\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\\n\\n        // Make the new kitten!\\n        address owner = kittyIndexToOwner[_matronId];\\n        uint256 kittenId = _createKitty(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\\n\\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\\n        // set is what marks a matron as being pregnant.)\\n        delete matron.siringWithId;\\n\\n        // Every time a kitty gives birth counter is decremented.\\n        pregnantKitties--;\\n\\n        // Send the balance fee to the person who made birth happen.\\n        msg.sender.send(autoBirthFee);\\n\\n        // return the new kitten's ID\\n        return kittenId;\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/// @title Auction Core\\n/// @dev Contains models, variables, and internal methods for the auction.\\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\\ncontract ClockAuctionBase {\\n\\n    // Represents an auction on an NFT\\n    struct Auction {\\n        // Current owner of NFT\\n        address seller;\\n        // Price (in wei) at beginning of auction\\n        uint128 startingPrice;\\n        // Price (in wei) at end of auction\\n        uint128 endingPrice;\\n        // Duration (in seconds) of auction\\n        uint64 duration;\\n        // Time when auction started\\n        // NOTE: 0 if this auction has been concluded\\n        uint64 startedAt;\\n    }\\n\\n    // Reference to contract tracking NFT ownership\\n    ERC721 public nonFungibleContract;\\n\\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\\n    // Values 0-10,000 map to 0%-100%\\n    uint256 public ownerCut;\\n\\n    // Map from token ID to their corresponding auction.\\n    mapping (uint256 => Auction) tokenIdToAuction;\\n\\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\\n    event AuctionCancelled(uint256 tokenId);\\n\\n    /// @dev Returns true if the claimant owns the token.\\n    /// @param _claimant - Address claiming to own the token.\\n    /// @param _tokenId - ID of token whose ownership to verify.\\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\\n    }\\n\\n    /// @dev Escrows the NFT, assigning ownership to this contract.\\n    /// Throws if the escrow fails.\\n    /// @param _owner - Current owner address of token to escrow.\\n    /// @param _tokenId - ID of token whose approval to verify.\\n    function _escrow(address _owner, uint256 _tokenId) internal {\\n        // it will throw if transfer fails\\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\\n    }\\n\\n    /// @dev Transfers an NFT owned by this contract to another address.\\n    /// Returns true if the transfer succeeds.\\n    /// @param _receiver - Address to transfer NFT to.\\n    /// @param _tokenId - ID of token to transfer.\\n    function _transfer(address _receiver, uint256 _tokenId) internal {\\n        // it will throw if transfer fails\\n        nonFungibleContract.transfer(_receiver, _tokenId);\\n    }\\n\\n    /// @dev Adds an auction to the list of open auctions. Also fires the\\n    ///  AuctionCreated event.\\n    /// @param _tokenId The ID of the token to be put on auction.\\n    /// @param _auction Auction to add.\\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\\n        // Require that all auctions have a duration of\\n        // at least one minute. (Keeps our math from getting hairy!)\\n        require(_auction.duration >= 1 minutes);\\n\\n        tokenIdToAuction[_tokenId] = _auction;\\n\\n        AuctionCreated(\\n            uint256(_tokenId),\\n            uint256(_auction.startingPrice),\\n            uint256(_auction.endingPrice),\\n            uint256(_auction.duration)\\n        );\\n    }\\n\\n    /// @dev Cancels an auction unconditionally.\\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\\n        _removeAuction(_tokenId);\\n        _transfer(_seller, _tokenId);\\n        AuctionCancelled(_tokenId);\\n    }\\n\\n    /// @dev Computes the price and transfers winnings.\\n    /// Does NOT transfer ownership of token.\\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        // Get a reference to the auction struct\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n\\n        // Explicitly check that this auction is currently live.\\n        // (Because of how Ethereum mappings work, we can't just count\\n        // on the lookup above failing. An invalid _tokenId will just\\n        // return an auction object that is all zeros.)\\n        require(_isOnAuction(auction));\\n\\n        // Check that the bid is greater than or equal to the current price\\n        uint256 price = _currentPrice(auction);\\n        require(_bidAmount >= price);\\n\\n        // Grab a reference to the seller before the auction struct\\n        // gets deleted.\\n        address seller = auction.seller;\\n\\n        // The bid is good! Remove the auction before sending the fees\\n        // to the sender so we can't have a reentrancy attack.\\n        _removeAuction(_tokenId);\\n\\n        // Transfer proceeds to seller (if there are any!)\\n        if (price > 0) {\\n            // Calculate the auctioneer's cut.\\n            // (NOTE: _computeCut() is guaranteed to return a\\n            // value <= price, so this subtraction can't go negative.)\\n            uint256 auctioneerCut = _computeCut(price);\\n            uint256 sellerProceeds = price - auctioneerCut;\\n\\n            // NOTE: Doing a transfer() in the middle of a complex\\n            // method like this is generally discouraged because of\\n            // reentrancy attacks and DoS attacks if the seller is\\n            // a contract with an invalid fallback function. We explicitly\\n            // guard against reentrancy attacks by removing the auction\\n            // before calling transfer(), and the only thing the seller\\n            // can DoS is the sale of their own asset! (And if it's an\\n            // accident, they can call cancelAuction(). )\\n            seller.transfer(sellerProceeds);\\n        }\\n\\n        // Calculate any excess funds included with the bid. If the excess\\n        // is anything worth worrying about, transfer it back to bidder.\\n        // NOTE: We checked above that the bid amount is greater than or\\n        // equal to the price so this cannot underflow.\\n        uint256 bidExcess = _bidAmount - price;\\n\\n        // Return the funds. Similar to the previous transfer, this is\\n        // not susceptible to a re-entry attack because the auction is\\n        // removed before any transfers occur.\\n        msg.sender.transfer(bidExcess);\\n\\n        // Tell the world!\\n        AuctionSuccessful(_tokenId, price, msg.sender);\\n\\n        return price;\\n    }\\n\\n    /// @dev Removes an auction from the list of open auctions.\\n    /// @param _tokenId - ID of NFT on auction.\\n    function _removeAuction(uint256 _tokenId) internal {\\n        delete tokenIdToAuction[_tokenId];\\n    }\\n\\n    /// @dev Returns true if the NFT is on auction.\\n    /// @param _auction - Auction to check.\\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\\n        return (_auction.startedAt > 0);\\n    }\\n\\n    /// @dev Returns current price of an NFT on auction. Broken into two\\n    ///  functions (this one, that computes the duration from the auction\\n    ///  structure, and the other that does the price computation) so we\\n    ///  can easily test that the price computation works correctly.\\n    function _currentPrice(Auction storage _auction)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 secondsPassed = 0;\\n\\n        // A bit of insurance against negative values (or wraparound).\\n        // Probably not necessary (since Ethereum guarnatees that the\\n        // now variable doesn't ever go backwards).\\n        if (now > _auction.startedAt) {\\n            secondsPassed = now - _auction.startedAt;\\n        }\\n\\n        return _computeCurrentPrice(\\n            _auction.startingPrice,\\n            _auction.endingPrice,\\n            _auction.duration,\\n            secondsPassed\\n        );\\n    }\\n\\n    /// @dev Computes the current price of an auction. Factored out\\n    ///  from _currentPrice so we can run extensive unit tests.\\n    ///  When testing, make this function public and turn on\\n    ///  `Current price computation` test suite.\\n    function _computeCurrentPrice(\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration,\\n        uint256 _secondsPassed\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // NOTE: We don't use SafeMath (or similar) in this function because\\n        //  all of our public functions carefully cap the maximum values for\\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\\n        //  also known to be non-zero (see the require() statement in\\n        //  _addAuction())\\n        if (_secondsPassed >= _duration) {\\n            // We've reached the end of the dynamic pricing portion\\n            // of the auction, just return the end price.\\n            return _endingPrice;\\n        } else {\\n            // Starting price can be higher than ending price (and often is!), so\\n            // this delta can be negative.\\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\\n\\n            // This multiplication can't overflow, _secondsPassed will easily fit within\\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\\n            // will always fit within 256-bits.\\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\\n\\n            // currentPriceChange can be negative, but if so, will have a magnitude\\n            // less that _startingPrice. Thus, this result will always end up positive.\\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\\n\\n            return uint256(currentPrice);\\n        }\\n    }\\n\\n    /// @dev Computes owner's cut of a sale.\\n    /// @param _price - Sale price of NFT.\\n    function _computeCut(uint256 _price) internal view returns (uint256) {\\n        // NOTE: We don't use SafeMath (or similar) in this function because\\n        //  all of our entry functions carefully cap the maximum values for\\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\\n        //  statement in the ClockAuction constructor). The result of this\\n        //  function is always guaranteed to be <= _price.\\n        return _price * ownerCut / 10000;\\n    }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev modifier to allow actions only when the contract IS paused\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev modifier to allow actions only when the contract IS NOT paused\\n   */\\n  modifier whenPaused {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused returns (bool) {\\n    paused = true;\\n    Pause();\\n    return true;\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused returns (bool) {\\n    paused = false;\\n    Unpause();\\n    return true;\\n  }\\n}\\n\\n\\n/// @title Clock auction for non-fungible tokens.\\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\\ncontract ClockAuction is Pausable, ClockAuctionBase {\\n\\n    /// @dev The ERC-165 interface signature for ERC-721.\\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\\n\\n    /// @dev Constructor creates a reference to the NFT ownership contract\\n    ///  and verifies the owner cut is in the valid range.\\n    /// @param _nftAddress - address of a deployed contract implementing\\n    ///  the Nonfungible Interface.\\n    /// @param _cut - percent cut the owner takes on each auction, must be\\n    ///  between 0-10,000.\\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\\n        require(_cut <= 10000);\\n        ownerCut = _cut;\\n\\n        ERC721 candidateContract = ERC721(_nftAddress);\\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\\n        nonFungibleContract = candidateContract;\\n    }\\n\\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\\n    ///  as well as any Ether sent directly to the contract address.\\n    ///  Always transfers to the NFT contract, but can be called either by\\n    ///  the owner or the NFT contract.\\n    function withdrawBalance() external {\\n        address nftAddress = address(nonFungibleContract);\\n\\n        require(\\n            msg.sender == owner ||\\n            msg.sender == nftAddress\\n        );\\n        // We are using this boolean method to make sure that even if one fails it will still work\\n        bool res = nftAddress.send(this.balance);\\n    }\\n\\n    /// @dev Creates and begins a new auction.\\n    /// @param _tokenId - ID of token to auction, sender must be owner.\\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\\n    /// @param _duration - Length of time to move between starting\\n    ///  price and ending price (in seconds).\\n    /// @param _seller - Seller, if not the message sender\\n    function createAuction(\\n        uint256 _tokenId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration,\\n        address _seller\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Sanity check that no inputs overflow how many bits we've allocated\\n        // to store them in the auction struct.\\n        require(_startingPrice == uint256(uint128(_startingPrice)));\\n        require(_endingPrice == uint256(uint128(_endingPrice)));\\n        require(_duration == uint256(uint64(_duration)));\\n\\n        require(_owns(msg.sender, _tokenId));\\n        _escrow(msg.sender, _tokenId);\\n        Auction memory auction = Auction(\\n            _seller,\\n            uint128(_startingPrice),\\n            uint128(_endingPrice),\\n            uint64(_duration),\\n            uint64(now)\\n        );\\n        _addAuction(_tokenId, auction);\\n    }\\n\\n    /// @dev Bids on an open auction, completing the auction and transferring\\n    ///  ownership of the NFT if enough Ether is supplied.\\n    /// @param _tokenId - ID of token to bid on.\\n    function bid(uint256 _tokenId)\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        // _bid will throw if the bid or funds transfer fails\\n        _bid(_tokenId, msg.value);\\n        _transfer(msg.sender, _tokenId);\\n    }\\n\\n    /// @dev Cancels an auction that hasn't been won yet.\\n    ///  Returns the NFT to original owner.\\n    /// @notice This is a state-modifying function that can\\n    ///  be called while the contract is paused.\\n    /// @param _tokenId - ID of token on auction\\n    function cancelAuction(uint256 _tokenId)\\n        external\\n    {\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n        require(_isOnAuction(auction));\\n        address seller = auction.seller;\\n        require(msg.sender == seller);\\n        _cancelAuction(_tokenId, seller);\\n    }\\n\\n    /// @dev Cancels an auction when the contract is paused.\\n    ///  Only the owner may do this, and NFTs are returned to\\n    ///  the seller. This should only be used in emergencies.\\n    /// @param _tokenId - ID of the NFT on auction to cancel.\\n    function cancelAuctionWhenPaused(uint256 _tokenId)\\n        whenPaused\\n        onlyOwner\\n        external\\n    {\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n        require(_isOnAuction(auction));\\n        _cancelAuction(_tokenId, auction.seller);\\n    }\\n\\n    /// @dev Returns auction info for an NFT on auction.\\n    /// @param _tokenId - ID of NFT on auction.\\n    function getAuction(uint256 _tokenId)\\n        external\\n        view\\n        returns\\n    (\\n        address seller,\\n        uint256 startingPrice,\\n        uint256 endingPrice,\\n        uint256 duration,\\n        uint256 startedAt\\n    ) {\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n        require(_isOnAuction(auction));\\n        return (\\n            auction.seller,\\n            auction.startingPrice,\\n            auction.endingPrice,\\n            auction.duration,\\n            auction.startedAt\\n        );\\n    }\\n\\n    /// @dev Returns the current price of an auction.\\n    /// @param _tokenId - ID of the token price we are checking.\\n    function getCurrentPrice(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        Auction storage auction = tokenIdToAuction[_tokenId];\\n        require(_isOnAuction(auction));\\n        return _currentPrice(auction);\\n    }\\n\\n}\\n\\n\\n/// @title Reverse auction modified for siring\\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\\ncontract SiringClockAuction is ClockAuction {\\n\\n    // @dev Sanity check that allows us to ensure that we are pointing to the\\n    //  right auction in our setSiringAuctionAddress() call.\\n    bool public isSiringClockAuction = true;\\n\\n    // Delegate constructor\\n    function SiringClockAuction(address _nftAddr, uint256 _cut) public\\n        ClockAuction(_nftAddr, _cut) {}\\n\\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\\n    /// require sender to be KittyCore contract.\\n    /// @param _tokenId - ID of token to auction, sender must be owner.\\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\\n    /// @param _duration - Length of auction (in seconds).\\n    /// @param _seller - Seller, if not the message sender\\n    function createAuction(\\n        uint256 _tokenId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration,\\n        address _seller\\n    )\\n        external\\n    {\\n        // Sanity check that no inputs overflow how many bits we've allocated\\n        // to store them in the auction struct.\\n        require(_startingPrice == uint256(uint128(_startingPrice)));\\n        require(_endingPrice == uint256(uint128(_endingPrice)));\\n        require(_duration == uint256(uint64(_duration)));\\n\\n        require(msg.sender == address(nonFungibleContract));\\n        _escrow(_seller, _tokenId);\\n        Auction memory auction = Auction(\\n            _seller,\\n            uint128(_startingPrice),\\n            uint128(_endingPrice),\\n            uint64(_duration),\\n            uint64(now)\\n        );\\n        _addAuction(_tokenId, auction);\\n    }\\n\\n    /// @dev Places a bid for siring. Requires the sender\\n    /// is the KittyCore contract because all bid methods\\n    /// should be wrapped. Also returns the kitty to the\\n    /// seller rather than the winner.\\n    function bid(uint256 _tokenId)\\n        external\\n        payable\\n    {\\n        require(msg.sender == address(nonFungibleContract));\\n        address seller = tokenIdToAuction[_tokenId].seller;\\n        // _bid checks that token ID is valid and will throw if bid fails\\n        _bid(_tokenId, msg.value);\\n        // We transfer the kitty back to the seller, the winner will get\\n        // the offspring\\n        _transfer(seller, _tokenId);\\n    }\\n\\n}\\n\\n\\n\\n\\n\\n/// @title Clock auction modified for sale of kitties\\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\\ncontract SaleClockAuction is ClockAuction {\\n\\n    // @dev Sanity check that allows us to ensure that we are pointing to the\\n    //  right auction in our setSaleAuctionAddress() call.\\n    bool public isSaleClockAuction = true;\\n\\n    // Tracks last 5 sale price of gen0 kitty sales\\n    uint256 public gen0SaleCount;\\n    uint256[5] public lastGen0SalePrices;\\n\\n    // Delegate constructor\\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\\n        ClockAuction(_nftAddr, _cut) {}\\n\\n    /// @dev Creates and begins a new auction.\\n    /// @param _tokenId - ID of token to auction, sender must be owner.\\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\\n    /// @param _duration - Length of auction (in seconds).\\n    /// @param _seller - Seller, if not the message sender\\n    function createAuction(\\n        uint256 _tokenId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration,\\n        address _seller\\n    )\\n        external\\n    {\\n        // Sanity check that no inputs overflow how many bits we've allocated\\n        // to store them in the auction struct.\\n        require(_startingPrice == uint256(uint128(_startingPrice)));\\n        require(_endingPrice == uint256(uint128(_endingPrice)));\\n        require(_duration == uint256(uint64(_duration)));\\n\\n        require(msg.sender == address(nonFungibleContract));\\n        _escrow(_seller, _tokenId);\\n        Auction memory auction = Auction(\\n            _seller,\\n            uint128(_startingPrice),\\n            uint128(_endingPrice),\\n            uint64(_duration),\\n            uint64(now)\\n        );\\n        _addAuction(_tokenId, auction);\\n    }\\n\\n    /// @dev Updates lastSalePrice if seller is the nft contract\\n    /// Otherwise, works the same as default bid method.\\n    function bid(uint256 _tokenId)\\n        external\\n        payable\\n    {\\n        // _bid verifies token ID size\\n        address seller = tokenIdToAuction[_tokenId].seller;\\n        uint256 price = _bid(_tokenId, msg.value);\\n        _transfer(msg.sender, _tokenId);\\n\\n        // If not a gen0 auction, exit\\n        if (seller == address(nonFungibleContract)) {\\n            // Track gen0 sale prices\\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\\n            gen0SaleCount++;\\n        }\\n    }\\n\\n    function averageGen0SalePrice() external view returns (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < 5; i++) {\\n            sum += lastGen0SalePrices[i];\\n        }\\n        return sum / 5;\\n    }\\n\\n}\\n\\n\\n/// @title Handles creating auctions for sale and siring of kitties.\\n///  This wrapper of ReverseAuction exists only so that users can create\\n///  auctions with only one transaction.\\ncontract KittyAuction is KittyBreeding {\\n\\n    // @notice The auction contract variables are defined in KittyBase to allow\\n    //  us to refer to them in KittyOwnership to prevent accidental transfers.\\n    // `saleAuction` refers to the auction for gen0 and p2p sale of kitties.\\n    // `siringAuction` refers to the auction for siring rights of kitties.\\n\\n    /// @dev Sets the reference to the sale auction.\\n    /// @param _address - Address of sale contract.\\n    function setSaleAuctionAddress(address _address) external onlyCEO {\\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\\n\\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\\n        require(candidateContract.isSaleClockAuction());\\n\\n        // Set the new contract address\\n        saleAuction = candidateContract;\\n    }\\n\\n    /// @dev Sets the reference to the siring auction.\\n    /// @param _address - Address of siring contract.\\n    function setSiringAuctionAddress(address _address) external onlyCEO {\\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\\n\\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\\n        require(candidateContract.isSiringClockAuction());\\n\\n        // Set the new contract address\\n        siringAuction = candidateContract;\\n    }\\n\\n    /// @dev Put a kitty up for auction.\\n    ///  Does some ownership trickery to create auctions in one tx.\\n    function createSaleAuction(\\n        uint256 _kittyId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Auction contract checks input sizes\\n        // If kitty is already on any auction, this will throw\\n        // because it will be owned by the auction contract.\\n        require(_owns(msg.sender, _kittyId));\\n        // Ensure the kitty is not pregnant to prevent the auction\\n        // contract accidentally receiving ownership of the child.\\n        // NOTE: the kitty IS allowed to be in a cooldown.\\n        require(!isPregnant(_kittyId));\\n        _approve(_kittyId, saleAuction);\\n        // Sale auction throws if inputs are invalid and clears\\n        // transfer and sire approval after escrowing the kitty.\\n        saleAuction.createAuction(\\n            _kittyId,\\n            _startingPrice,\\n            _endingPrice,\\n            _duration,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @dev Put a kitty up for auction to be sire.\\n    ///  Performs checks to ensure the kitty can be sired, then\\n    ///  delegates to reverse auction.\\n    function createSiringAuction(\\n        uint256 _kittyId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        // Auction contract checks input sizes\\n        // If kitty is already on any auction, this will throw\\n        // because it will be owned by the auction contract.\\n        require(_owns(msg.sender, _kittyId));\\n        require(isReadyToBreed(_kittyId));\\n        _approve(_kittyId, siringAuction);\\n        // Siring auction throws if inputs are invalid and clears\\n        // transfer and sire approval after escrowing the kitty.\\n        siringAuction.createAuction(\\n            _kittyId,\\n            _startingPrice,\\n            _endingPrice,\\n            _duration,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @dev Completes a siring auction by bidding.\\n    ///  Immediately breeds the winning matron with the sire on auction.\\n    /// @param _sireId - ID of the sire on auction.\\n    /// @param _matronId - ID of the matron owned by the bidder.\\n    function bidOnSiringAuction(\\n        uint256 _sireId,\\n        uint256 _matronId\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        // Auction contract checks input sizes\\n        require(_owns(msg.sender, _matronId));\\n        require(isReadyToBreed(_matronId));\\n        require(_canBreedWithViaAuction(_matronId, _sireId));\\n\\n        // Define the current price of the auction.\\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\\n        require(msg.value >= currentPrice + autoBirthFee);\\n\\n        // Siring auction will throw if the bid fails.\\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\\n        _breedWith(uint32(_matronId), uint32(_sireId));\\n    }\\n\\n    /// @dev Transfers the balance of the sale auction contract\\n    /// to the KittyCore contract. We use two-step withdrawal to\\n    /// prevent two transfer calls in the auction bid function.\\n    function withdrawAuctionBalances() external onlyCLevel {\\n        saleAuction.withdrawBalance();\\n        siringAuction.withdrawBalance();\\n    }\\n}\\n\\n\\n/// @title all functions related to creating kittens\\ncontract KittyMinting is KittyAuction {\\n\\n    // Limits the number of cats the contract owner can ever create.\\n    uint256 public constant PROMO_CREATION_LIMIT = 5000;\\n    uint256 public constant GEN0_CREATION_LIMIT = 45000;\\n\\n    // Constants for gen0 auctions.\\n    uint256 public constant GEN0_STARTING_PRICE = 10 finney;\\n    uint256 public constant GEN0_AUCTION_DURATION = 1 days;\\n\\n    // Counts the number of cats the contract owner has created.\\n    uint256 public promoCreatedCount;\\n    uint256 public gen0CreatedCount;\\n\\n    /// @dev we can create promo kittens, up to a limit. Only callable by COO\\n    /// @param _genes the encoded genes of the kitten to be created, any value is accepted\\n    /// @param _owner the future owner of the created kittens. Default to contract COO\\n    function createPromoKitty(uint256 _genes, address _owner) external onlyCOO {\\n        address kittyOwner = _owner;\\n        if (kittyOwner == address(0)) {\\n             kittyOwner = cooAddress;\\n        }\\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\\n\\n        promoCreatedCount++;\\n        _createKitty(0, 0, 0, _genes, kittyOwner);\\n    }\\n\\n    /// @dev Creates a new gen0 kitty with the given genes and\\n    ///  creates an auction for it.\\n    function createGen0Auction(uint256 _genes) external onlyCOO {\\n        require(gen0CreatedCount < GEN0_CREATION_LIMIT);\\n\\n        uint256 kittyId = _createKitty(0, 0, 0, _genes, address(this));\\n        _approve(kittyId, saleAuction);\\n\\n        saleAuction.createAuction(\\n            kittyId,\\n            _computeNextGen0Price(),\\n            0,\\n            GEN0_AUCTION_DURATION,\\n            address(this)\\n        );\\n\\n        gen0CreatedCount++;\\n    }\\n\\n    /// @dev Computes the next gen0 auction starting price, given\\n    ///  the average of the past 5 prices + 50%.\\n    function _computeNextGen0Price() internal view returns (uint256) {\\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\\n\\n        // Sanity check to ensure we don't overflow arithmetic\\n        require(avePrice == uint256(uint128(avePrice)));\\n\\n        uint256 nextPrice = avePrice + (avePrice / 2);\\n\\n        // We never auction for less than starting price\\n        if (nextPrice < GEN0_STARTING_PRICE) {\\n            nextPrice = GEN0_STARTING_PRICE;\\n        }\\n\\n        return nextPrice;\\n    }\\n}\\n\\n\\n/// @title CryptoKitties: Collectible, breedable, and oh-so-adorable cats on the Ethereum blockchain.\\n/// @author Axiom Zen (https://www.axiomzen.co)\\n/// @dev The main CryptoKitties contract, keeps track of kittens so they don't wander around and get lost.\\ncontract KittyCore is KittyMinting {\\n\\n    // This is the main CryptoKitties contract. In order to keep our code seperated into logical sections,\\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\\n    // kitty ownership. The genetic combination algorithm is kept seperate so we can open-source all of\\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\\n    //\\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\\n    //\\n    //      - KittyBase: This is where we define the most fundamental code shared throughout the core\\n    //             functionality. This includes our main data storage, constants and data types, plus\\n    //             internal functions for managing these items.\\n    //\\n    //      - KittyAccessControl: This contract manages the various addresses and constraints for operations\\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\\n    //\\n    //      - KittyOwnership: This provides the methods required for basic non-fungible token\\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\\n    //\\n    //      - KittyBreeding: This file contains the methods necessary to breed cats together, including\\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\\n    //\\n    //      - KittyAuctions: Here we have the public methods for auctioning or bidding on cats or siring\\n    //             services. The actual auction functionality is handled in two sibling contracts (one\\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\\n    //             through this facet of the core contract.\\n    //\\n    //      - KittyMinting: This final facet contains the functionality we use for creating new gen0 cats.\\n    //             We can make up to 5000 \\\"promo\\\" cats that can be given away (especially important when\\n    //             the community is new), and all others can only be created and then immediately put up\\n    //             for auction via an algorithmically determined starting price. Regardless of how they\\n    //             are created, there is a hard limit of 50k gen0 cats. After that, it's all up to the\\n    //             community to breed, breed, breed!\\n\\n    // Set in case the core contract is broken and an upgrade is required\\n    address public newContractAddress;\\n\\n    /// @notice Creates the main CryptoKitties smart contract instance.\\n    function KittyCore() public {\\n        // Starts paused.\\n        paused = true;\\n\\n        // the creator of the contract is the initial CEO\\n        ceoAddress = msg.sender;\\n\\n        // the creator of the contract is also the initial COO\\n        cooAddress = msg.sender;\\n\\n        // start with the mythical kitten 0 - so we don't have generation-0 parent issues\\n        _createKitty(0, 0, 0, uint256(-1), address(0));\\n    }\\n\\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\\n    ///  breaking bug. This method does nothing but keep track of the new contract and\\n    ///  emit a message indicating that the new address is set. It's up to clients of this\\n    ///  contract to update to the new contract address in that case. (This contract will\\n    ///  be paused indefinitely if such an upgrade takes place.)\\n    /// @param _v2Address new address\\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\\n        // See README.md for updgrade plan\\n        newContractAddress = _v2Address;\\n        ContractUpgrade(_v2Address);\\n    }\\n\\n    /// @notice No tipping!\\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\\n    function() external payable {\\n        require(\\n            msg.sender == address(saleAuction) ||\\n            msg.sender == address(siringAuction)\\n        );\\n    }\\n\\n    /// @notice Returns all the relevant information about a specific kitty.\\n    /// @param _id The ID of the kitty of interest.\\n    function getKitty(uint256 _id)\\n        external\\n        view\\n        returns (\\n        bool isGestating,\\n        bool isReady,\\n        uint256 cooldownIndex,\\n        uint256 nextActionAt,\\n        uint256 siringWithId,\\n        uint256 birthTime,\\n        uint256 matronId,\\n        uint256 sireId,\\n        uint256 generation,\\n        uint256 genes\\n    ) {\\n        Kitty storage kit = kitties[_id];\\n\\n        // if this variable is 0 then it's not gestating\\n        isGestating = (kit.siringWithId != 0);\\n        isReady = (kit.cooldownEndBlock <= block.number);\\n        cooldownIndex = uint256(kit.cooldownIndex);\\n        nextActionAt = uint256(kit.cooldownEndBlock);\\n        siringWithId = uint256(kit.siringWithId);\\n        birthTime = uint256(kit.birthTime);\\n        matronId = uint256(kit.matronId);\\n        sireId = uint256(kit.sireId);\\n        generation = uint256(kit.generation);\\n        genes = kit.genes;\\n    }\\n\\n    /// @dev Override unpause so it requires all external contract addresses\\n    ///  to be set before contract can be unpaused. Also, we can't have\\n    ///  newContractAddress set either, because then the contract was upgraded.\\n    /// @notice This is public rather than external so we can call super.unpause\\n    ///  without using an expensive CALL.\\n    function unpause() public onlyCEO whenPaused {\\n        require(saleAuction != address(0));\\n        require(siringAuction != address(0));\\n        require(geneScience != address(0));\\n        require(newContractAddress == address(0));\\n\\n        // Actually unpause the contract.\\n        super.unpause();\\n    }\\n\\n    // @dev Allows the CFO to capture the balance available to the contract.\\n    function withdrawBalance() external onlyCFO {\\n        uint256 balance = this.balance;\\n        // Subtract all the currently pregnant kittens we have, plus 1 of margin.\\n        uint256 subtractFees = (pregnantKitties + 1) * autoBirthFee;\\n\\n        if (balance > subtractFees) {\\n            cfoAddress.send(balance - subtractFees);\\n        }\\n    }\\n}\\n\"}}"
          },
          "cookies": [
            {
              "expires": "2019-07-26T22:18:48.000Z",
              "name": "AWSALB",
              "path": "/",
              "value": "lO6QOpiCjefaktypIEWXk9lebYpM68521flI2q6gAHaGShd0a48Zzuz5aiu6Q9gKL3Gi3PEVqDKbgDYin27u6BmWRCu1ZHx0y4N4WIkw3sOjvHMB/RcAymmKIwPi"
            }
          ],
          "headers": [
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "122309"
            },
            {
              "name": "connection",
              "value": "close"
            },
            {
              "name": "date",
              "value": "Fri, 19 Jul 2019 22:18:48 GMT"
            },
            {
              "name": "x-amzn-requestid",
              "value": "2e0c9cbf-aa73-11e9-a977-c7cf9b76d44c"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "x-response-time",
              "value": "94.173ms"
            },
            {
              "name": "x-amzn-remapped-content-length",
              "value": "122309"
            },
            {
              "name": "x-amzn-remapped-connection",
              "value": "keep-alive"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "AWSALB=lO6QOpiCjefaktypIEWXk9lebYpM68521flI2q6gAHaGShd0a48Zzuz5aiu6Q9gKL3Gi3PEVqDKbgDYin27u6BmWRCu1ZHx0y4N4WIkw3sOjvHMB/RcAymmKIwPi; Expires=Fri, 26 Jul 2019 22:18:48 GMT; Path=/"
            },
            {
              "name": "x-amz-apigw-id",
              "value": "dF83SHdCIAMFruw="
            },
            {
              "name": "etag",
              "value": "W/\"1ddc5-zXv74SiYEe4XR9rNdZhBFuICYnw\""
            },
            {
              "name": "x-amzn-remapped-date",
              "value": "Fri, 19 Jul 2019 22:18:48 GMT"
            },
            {
              "name": "x-cache",
              "value": "Miss from cloudfront"
            },
            {
              "name": "via",
              "value": "1.1 e785d36fcfe1e6758d8c1a9a71445bbe.cloudfront.net (CloudFront)"
            },
            {
              "name": "x-amz-cf-pop",
              "value": "SEA19"
            },
            {
              "name": "x-amz-cf-id",
              "value": "TUhYCZSQ8G3jFAFMz3xmiNODa9THlTjrm4YU4SytJcP-2W_zEiBf2A=="
            }
          ],
          "headersSize": 842,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2019-07-19T22:18:47.879Z",
        "time": 777,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 777
        }
      },
      {
        "_id": "e2133f55ab1f2c902b5ce581bf7e12ca",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "name": "x-api-key",
              "value": "API_KEY"
            },
            {
              "name": "user-agent",
              "value": "axios/0.19.0"
            },
            {
              "name": "host",
              "value": "web3api.io"
            }
          ],
          "headersSize": 230,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [],
          "url": "https://web3api.io/api/v1/contracts/0x06012c8cf97bead5deae237070f9587f8e7a266e"
        },
        "response": {
          "bodySize": 75,
          "content": {
            "mimeType": "application/json; charset=utf-8",
            "size": 75,
            "text": "{\"status\":200,\"title\":\"OK\",\"description\":\"Successful request\",\"payload\":{}}"
          },
          "cookies": [
            {
              "expires": "2019-07-26T22:18:48.000Z",
              "name": "AWSALB",
              "path": "/",
              "value": "xORUDeste1A10mGvaRwTUINZBBWaYFhKh19siR6d38fOYtOjFl1l2Cbqi0LDAgR3FEbHc/adlfe3FAqU1t9Y/ISdie0/iEQTHucLtPKX4l8RpWntE5FWnjnjZXor"
            }
          ],
          "headers": [
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "content-length",
              "value": "75"
            },
            {
              "name": "connection",
              "value": "close"
            },
            {
              "name": "date",
              "value": "Fri, 19 Jul 2019 22:18:48 GMT"
            },
            {
              "name": "x-amzn-requestid",
              "value": "2e0d86a8-aa73-11e9-85d8-6184bd819727"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "x-response-time",
              "value": "549.254ms"
            },
            {
              "name": "x-amzn-remapped-content-length",
              "value": "75"
            },
            {
              "name": "x-amzn-remapped-connection",
              "value": "keep-alive"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "AWSALB=xORUDeste1A10mGvaRwTUINZBBWaYFhKh19siR6d38fOYtOjFl1l2Cbqi0LDAgR3FEbHc/adlfe3FAqU1t9Y/ISdie0/iEQTHucLtPKX4l8RpWntE5FWnjnjZXor; Expires=Fri, 26 Jul 2019 22:18:48 GMT; Path=/"
            },
            {
              "name": "x-amz-apigw-id",
              "value": "dF83SHnGoAMFqyg="
            },
            {
              "name": "etag",
              "value": "W/\"4b-CF6cAMu50AuzLonS1lkcvIeHGCE\""
            },
            {
              "name": "x-amzn-remapped-date",
              "value": "Fri, 19 Jul 2019 22:18:48 GMT"
            },
            {
              "name": "x-cache",
              "value": "Miss from cloudfront"
            },
            {
              "name": "via",
              "value": "1.1 705346a13f947f63c1e75e5323c5e1c2.cloudfront.net (CloudFront)"
            },
            {
              "name": "x-amz-cf-pop",
              "value": "SEA19"
            },
            {
              "name": "x-amz-cf-id",
              "value": "PES-WhblUjO4jfsbM1ulbSAh2DQH58L5MnjecoqEbRxJ3tCFK9N6mA=="
            }
          ],
          "headersSize": 832,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2019-07-19T22:18:47.879Z",
        "time": 960,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 960
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
